/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.1.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { RemoteSubtitleInfo } from '../models';
/**
 * SubtitleServiceApi - axios parameter creator
 * @export
 */
export const SubtitleServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Deletes an external subtitle file
         * @param {string} id Item Id
         * @param {number} index The subtitle stream index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVideosByIdSubtitlesByIndex: async (id: string, index: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteVideosByIdSubtitlesByIndex.');
            }
            // verify required parameter 'index' is not null or undefined
            if (index === null || index === undefined) {
                throw new RequiredError('index','Required parameter index was null or undefined when calling deleteVideosByIdSubtitlesByIndex.');
            }
            const localVarPath = `/Videos/{Id}/Subtitles/{Index}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"Index"}}`, encodeURIComponent(String(index)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @param {string} id Item Id
         * @param {string} language Language
         * @param {boolean} [isPerfectMatch] IsPerfectMatch
         * @param {boolean} [isForced] IsForced
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByIdRemotesearchSubtitlesByLanguage: async (id: string, language: string, isPerfectMatch?: boolean, isForced?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getItemsByIdRemotesearchSubtitlesByLanguage.');
            }
            // verify required parameter 'language' is not null or undefined
            if (language === null || language === undefined) {
                throw new RequiredError('language','Required parameter language was null or undefined when calling getItemsByIdRemotesearchSubtitlesByLanguage.');
            }
            const localVarPath = `/Items/{Id}/RemoteSearch/Subtitles/{Language}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"Language"}}`, encodeURIComponent(String(language)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            if (isPerfectMatch !== undefined) {
                localVarQueryParameter['IsPerfectMatch'] = isPerfectMatch;
            }

            if (isForced !== undefined) {
                localVarQueryParameter['IsForced'] = isForced;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProvidersSubtitlesSubtitlesById: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getProvidersSubtitlesSubtitlesById.');
            }
            const localVarPath = `/Providers/Subtitles/Subtitles/{Id}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * No authentication required
         * @summary Gets subtitles in a specified format.
         * @param {string} id Item Id
         * @param {string} mediaSourceId MediaSourceId
         * @param {number} index The subtitle stream index
         * @param {string} format Format
         * @param {number} [startPositionTicks] StartPositionTicks
         * @param {number} [endPositionTicks] EndPositionTicks
         * @param {boolean} [copyTimestamps] CopyTimestamps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideosByIdByMediasourceidSubtitlesByIndexByFormat: async (id: string, mediaSourceId: string, index: number, format: string, startPositionTicks?: number, endPositionTicks?: number, copyTimestamps?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getVideosByIdByMediasourceidSubtitlesByIndexByFormat.');
            }
            // verify required parameter 'mediaSourceId' is not null or undefined
            if (mediaSourceId === null || mediaSourceId === undefined) {
                throw new RequiredError('mediaSourceId','Required parameter mediaSourceId was null or undefined when calling getVideosByIdByMediasourceidSubtitlesByIndexByFormat.');
            }
            // verify required parameter 'index' is not null or undefined
            if (index === null || index === undefined) {
                throw new RequiredError('index','Required parameter index was null or undefined when calling getVideosByIdByMediasourceidSubtitlesByIndexByFormat.');
            }
            // verify required parameter 'format' is not null or undefined
            if (format === null || format === undefined) {
                throw new RequiredError('format','Required parameter format was null or undefined when calling getVideosByIdByMediasourceidSubtitlesByIndexByFormat.');
            }
            const localVarPath = `/Videos/{Id}/{MediaSourceId}/Subtitles/{Index}/Stream.{Format}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"MediaSourceId"}}`, encodeURIComponent(String(mediaSourceId)))
                .replace(`{${"Index"}}`, encodeURIComponent(String(index)))
                .replace(`{${"Format"}}`, encodeURIComponent(String(format)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startPositionTicks !== undefined) {
                localVarQueryParameter['StartPositionTicks'] = startPositionTicks;
            }

            if (endPositionTicks !== undefined) {
                localVarQueryParameter['EndPositionTicks'] = endPositionTicks;
            }

            if (copyTimestamps !== undefined) {
                localVarQueryParameter['CopyTimestamps'] = copyTimestamps;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * No authentication required
         * @summary Gets subtitles in a specified format.
         * @param {string} id Item Id
         * @param {string} mediaSourceId MediaSourceId
         * @param {number} index The subtitle stream index
         * @param {string} format Format
         * @param {number} startPositionTicks StartPositionTicks
         * @param {number} [endPositionTicks] EndPositionTicks
         * @param {boolean} [copyTimestamps] CopyTimestamps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormat: async (id: string, mediaSourceId: string, index: number, format: string, startPositionTicks: number, endPositionTicks?: number, copyTimestamps?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormat.');
            }
            // verify required parameter 'mediaSourceId' is not null or undefined
            if (mediaSourceId === null || mediaSourceId === undefined) {
                throw new RequiredError('mediaSourceId','Required parameter mediaSourceId was null or undefined when calling getVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormat.');
            }
            // verify required parameter 'index' is not null or undefined
            if (index === null || index === undefined) {
                throw new RequiredError('index','Required parameter index was null or undefined when calling getVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormat.');
            }
            // verify required parameter 'format' is not null or undefined
            if (format === null || format === undefined) {
                throw new RequiredError('format','Required parameter format was null or undefined when calling getVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormat.');
            }
            // verify required parameter 'startPositionTicks' is not null or undefined
            if (startPositionTicks === null || startPositionTicks === undefined) {
                throw new RequiredError('startPositionTicks','Required parameter startPositionTicks was null or undefined when calling getVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormat.');
            }
            const localVarPath = `/Videos/{Id}/{MediaSourceId}/Subtitles/{Index}/{StartPositionTicks}/Stream.{Format}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"MediaSourceId"}}`, encodeURIComponent(String(mediaSourceId)))
                .replace(`{${"Index"}}`, encodeURIComponent(String(index)))
                .replace(`{${"Format"}}`, encodeURIComponent(String(format)))
                .replace(`{${"StartPositionTicks"}}`, encodeURIComponent(String(startPositionTicks)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (endPositionTicks !== undefined) {
                localVarQueryParameter['EndPositionTicks'] = endPositionTicks;
            }

            if (copyTimestamps !== undefined) {
                localVarQueryParameter['CopyTimestamps'] = copyTimestamps;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @param {string} id Item Id
         * @param {string} subtitleId SubtitleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsByIdRemotesearchSubtitlesBySubtitleid: async (id: string, subtitleId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling postItemsByIdRemotesearchSubtitlesBySubtitleid.');
            }
            // verify required parameter 'subtitleId' is not null or undefined
            if (subtitleId === null || subtitleId === undefined) {
                throw new RequiredError('subtitleId','Required parameter subtitleId was null or undefined when calling postItemsByIdRemotesearchSubtitlesBySubtitleid.');
            }
            const localVarPath = `/Items/{Id}/RemoteSearch/Subtitles/{SubtitleId}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"SubtitleId"}}`, encodeURIComponent(String(subtitleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubtitleServiceApi - functional programming interface
 * @export
 */
export const SubtitleServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Deletes an external subtitle file
         * @param {string} id Item Id
         * @param {number} index The subtitle stream index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVideosByIdSubtitlesByIndex(id: string, index: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SubtitleServiceApiAxiosParamCreator(configuration).deleteVideosByIdSubtitlesByIndex(id, index, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @param {string} id Item Id
         * @param {string} language Language
         * @param {boolean} [isPerfectMatch] IsPerfectMatch
         * @param {boolean} [isForced] IsForced
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemsByIdRemotesearchSubtitlesByLanguage(id: string, language: string, isPerfectMatch?: boolean, isForced?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RemoteSubtitleInfo>>> {
            const localVarAxiosArgs = await SubtitleServiceApiAxiosParamCreator(configuration).getItemsByIdRemotesearchSubtitlesByLanguage(id, language, isPerfectMatch, isForced, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProvidersSubtitlesSubtitlesById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SubtitleServiceApiAxiosParamCreator(configuration).getProvidersSubtitlesSubtitlesById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * No authentication required
         * @summary Gets subtitles in a specified format.
         * @param {string} id Item Id
         * @param {string} mediaSourceId MediaSourceId
         * @param {number} index The subtitle stream index
         * @param {string} format Format
         * @param {number} [startPositionTicks] StartPositionTicks
         * @param {number} [endPositionTicks] EndPositionTicks
         * @param {boolean} [copyTimestamps] CopyTimestamps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVideosByIdByMediasourceidSubtitlesByIndexByFormat(id: string, mediaSourceId: string, index: number, format: string, startPositionTicks?: number, endPositionTicks?: number, copyTimestamps?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SubtitleServiceApiAxiosParamCreator(configuration).getVideosByIdByMediasourceidSubtitlesByIndexByFormat(id, mediaSourceId, index, format, startPositionTicks, endPositionTicks, copyTimestamps, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * No authentication required
         * @summary Gets subtitles in a specified format.
         * @param {string} id Item Id
         * @param {string} mediaSourceId MediaSourceId
         * @param {number} index The subtitle stream index
         * @param {string} format Format
         * @param {number} startPositionTicks StartPositionTicks
         * @param {number} [endPositionTicks] EndPositionTicks
         * @param {boolean} [copyTimestamps] CopyTimestamps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormat(id: string, mediaSourceId: string, index: number, format: string, startPositionTicks: number, endPositionTicks?: number, copyTimestamps?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SubtitleServiceApiAxiosParamCreator(configuration).getVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormat(id, mediaSourceId, index, format, startPositionTicks, endPositionTicks, copyTimestamps, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @param {string} id Item Id
         * @param {string} subtitleId SubtitleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postItemsByIdRemotesearchSubtitlesBySubtitleid(id: string, subtitleId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SubtitleServiceApiAxiosParamCreator(configuration).postItemsByIdRemotesearchSubtitlesBySubtitleid(id, subtitleId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SubtitleServiceApi - factory interface
 * @export
 */
export const SubtitleServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Requires authentication as user
         * @summary Deletes an external subtitle file
         * @param {string} id Item Id
         * @param {number} index The subtitle stream index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVideosByIdSubtitlesByIndex(id: string, index: number, options?: any): AxiosPromise<void> {
            return SubtitleServiceApiFp(configuration).deleteVideosByIdSubtitlesByIndex(id, index, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @param {string} id Item Id
         * @param {string} language Language
         * @param {boolean} [isPerfectMatch] IsPerfectMatch
         * @param {boolean} [isForced] IsForced
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByIdRemotesearchSubtitlesByLanguage(id: string, language: string, isPerfectMatch?: boolean, isForced?: boolean, options?: any): AxiosPromise<Array<RemoteSubtitleInfo>> {
            return SubtitleServiceApiFp(configuration).getItemsByIdRemotesearchSubtitlesByLanguage(id, language, isPerfectMatch, isForced, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProvidersSubtitlesSubtitlesById(id: string, options?: any): AxiosPromise<void> {
            return SubtitleServiceApiFp(configuration).getProvidersSubtitlesSubtitlesById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * No authentication required
         * @summary Gets subtitles in a specified format.
         * @param {string} id Item Id
         * @param {string} mediaSourceId MediaSourceId
         * @param {number} index The subtitle stream index
         * @param {string} format Format
         * @param {number} [startPositionTicks] StartPositionTicks
         * @param {number} [endPositionTicks] EndPositionTicks
         * @param {boolean} [copyTimestamps] CopyTimestamps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideosByIdByMediasourceidSubtitlesByIndexByFormat(id: string, mediaSourceId: string, index: number, format: string, startPositionTicks?: number, endPositionTicks?: number, copyTimestamps?: boolean, options?: any): AxiosPromise<void> {
            return SubtitleServiceApiFp(configuration).getVideosByIdByMediasourceidSubtitlesByIndexByFormat(id, mediaSourceId, index, format, startPositionTicks, endPositionTicks, copyTimestamps, options).then((request) => request(axios, basePath));
        },
        /**
         * No authentication required
         * @summary Gets subtitles in a specified format.
         * @param {string} id Item Id
         * @param {string} mediaSourceId MediaSourceId
         * @param {number} index The subtitle stream index
         * @param {string} format Format
         * @param {number} startPositionTicks StartPositionTicks
         * @param {number} [endPositionTicks] EndPositionTicks
         * @param {boolean} [copyTimestamps] CopyTimestamps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormat(id: string, mediaSourceId: string, index: number, format: string, startPositionTicks: number, endPositionTicks?: number, copyTimestamps?: boolean, options?: any): AxiosPromise<void> {
            return SubtitleServiceApiFp(configuration).getVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormat(id, mediaSourceId, index, format, startPositionTicks, endPositionTicks, copyTimestamps, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @param {string} id Item Id
         * @param {string} subtitleId SubtitleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsByIdRemotesearchSubtitlesBySubtitleid(id: string, subtitleId: string, options?: any): AxiosPromise<void> {
            return SubtitleServiceApiFp(configuration).postItemsByIdRemotesearchSubtitlesBySubtitleid(id, subtitleId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SubtitleServiceApi - object-oriented interface
 * @export
 * @class SubtitleServiceApi
 * @extends {BaseAPI}
 */
export class SubtitleServiceApi extends BaseAPI {
    /**
     * Requires authentication as user
     * @summary Deletes an external subtitle file
     * @param {string} id Item Id
     * @param {number} index The subtitle stream index
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleServiceApi
     */
    public deleteVideosByIdSubtitlesByIndex(id: string, index: number, options?: any) {
        return SubtitleServiceApiFp(this.configuration).deleteVideosByIdSubtitlesByIndex(id, index, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @param {string} id Item Id
     * @param {string} language Language
     * @param {boolean} [isPerfectMatch] IsPerfectMatch
     * @param {boolean} [isForced] IsForced
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleServiceApi
     */
    public getItemsByIdRemotesearchSubtitlesByLanguage(id: string, language: string, isPerfectMatch?: boolean, isForced?: boolean, options?: any) {
        return SubtitleServiceApiFp(this.configuration).getItemsByIdRemotesearchSubtitlesByLanguage(id, language, isPerfectMatch, isForced, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @param {string} id Item Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleServiceApi
     */
    public getProvidersSubtitlesSubtitlesById(id: string, options?: any) {
        return SubtitleServiceApiFp(this.configuration).getProvidersSubtitlesSubtitlesById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * No authentication required
     * @summary Gets subtitles in a specified format.
     * @param {string} id Item Id
     * @param {string} mediaSourceId MediaSourceId
     * @param {number} index The subtitle stream index
     * @param {string} format Format
     * @param {number} [startPositionTicks] StartPositionTicks
     * @param {number} [endPositionTicks] EndPositionTicks
     * @param {boolean} [copyTimestamps] CopyTimestamps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleServiceApi
     */
    public getVideosByIdByMediasourceidSubtitlesByIndexByFormat(id: string, mediaSourceId: string, index: number, format: string, startPositionTicks?: number, endPositionTicks?: number, copyTimestamps?: boolean, options?: any) {
        return SubtitleServiceApiFp(this.configuration).getVideosByIdByMediasourceidSubtitlesByIndexByFormat(id, mediaSourceId, index, format, startPositionTicks, endPositionTicks, copyTimestamps, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * No authentication required
     * @summary Gets subtitles in a specified format.
     * @param {string} id Item Id
     * @param {string} mediaSourceId MediaSourceId
     * @param {number} index The subtitle stream index
     * @param {string} format Format
     * @param {number} startPositionTicks StartPositionTicks
     * @param {number} [endPositionTicks] EndPositionTicks
     * @param {boolean} [copyTimestamps] CopyTimestamps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleServiceApi
     */
    public getVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormat(id: string, mediaSourceId: string, index: number, format: string, startPositionTicks: number, endPositionTicks?: number, copyTimestamps?: boolean, options?: any) {
        return SubtitleServiceApiFp(this.configuration).getVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormat(id, mediaSourceId, index, format, startPositionTicks, endPositionTicks, copyTimestamps, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @param {string} id Item Id
     * @param {string} subtitleId SubtitleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleServiceApi
     */
    public postItemsByIdRemotesearchSubtitlesBySubtitleid(id: string, subtitleId: string, options?: any) {
        return SubtitleServiceApiFp(this.configuration).postItemsByIdRemotesearchSubtitlesBySubtitleid(id, subtitleId, options).then((request) => request(this.axios, this.basePath));
    }
}
