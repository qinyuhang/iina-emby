/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.1.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { SearchSearchHintResult } from '../models';
/**
 * SearchServiceApi - axios parameter creator
 * @export
 */
export const SearchServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets search hints based on a search term
         * @param {string} searchTerm The search term to filter on
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {string} [userId] Optional. Supply a user id to search within a user&#x27;s library or omit to search all.
         * @param {boolean} [includePeople] 
         * @param {boolean} [includeMedia] 
         * @param {boolean} [includeGenres] 
         * @param {boolean} [includeStudios] 
         * @param {boolean} [includeArtists] 
         * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {string} [excludeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {string} [mediaTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {boolean} [isMovie] Optional filter for movies.
         * @param {boolean} [isSeries] Optional filter for movies.
         * @param {boolean} [isNews] Optional filter for news.
         * @param {boolean} [isKids] Optional filter for kids.
         * @param {boolean} [isSports] Optional filter for sports.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSearchHints: async (searchTerm: string, startIndex?: number, limit?: number, userId?: string, includePeople?: boolean, includeMedia?: boolean, includeGenres?: boolean, includeStudios?: boolean, includeArtists?: boolean, includeItemTypes?: string, excludeItemTypes?: string, mediaTypes?: string, isMovie?: boolean, isSeries?: boolean, isNews?: boolean, isKids?: boolean, isSports?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchTerm' is not null or undefined
            if (searchTerm === null || searchTerm === undefined) {
                throw new RequiredError('searchTerm','Required parameter searchTerm was null or undefined when calling getSearchHints.');
            }
            const localVarPath = `/Search/Hints`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            if (startIndex !== undefined) {
                localVarQueryParameter['StartIndex'] = startIndex;
            }

            if (limit !== undefined) {
                localVarQueryParameter['Limit'] = limit;
            }

            if (userId !== undefined) {
                localVarQueryParameter['UserId'] = userId;
            }

            if (searchTerm !== undefined) {
                localVarQueryParameter['SearchTerm'] = searchTerm;
            }

            if (includePeople !== undefined) {
                localVarQueryParameter['IncludePeople'] = includePeople;
            }

            if (includeMedia !== undefined) {
                localVarQueryParameter['IncludeMedia'] = includeMedia;
            }

            if (includeGenres !== undefined) {
                localVarQueryParameter['IncludeGenres'] = includeGenres;
            }

            if (includeStudios !== undefined) {
                localVarQueryParameter['IncludeStudios'] = includeStudios;
            }

            if (includeArtists !== undefined) {
                localVarQueryParameter['IncludeArtists'] = includeArtists;
            }

            if (includeItemTypes !== undefined) {
                localVarQueryParameter['IncludeItemTypes'] = includeItemTypes;
            }

            if (excludeItemTypes !== undefined) {
                localVarQueryParameter['ExcludeItemTypes'] = excludeItemTypes;
            }

            if (mediaTypes !== undefined) {
                localVarQueryParameter['MediaTypes'] = mediaTypes;
            }

            if (isMovie !== undefined) {
                localVarQueryParameter['IsMovie'] = isMovie;
            }

            if (isSeries !== undefined) {
                localVarQueryParameter['IsSeries'] = isSeries;
            }

            if (isNews !== undefined) {
                localVarQueryParameter['IsNews'] = isNews;
            }

            if (isKids !== undefined) {
                localVarQueryParameter['IsKids'] = isKids;
            }

            if (isSports !== undefined) {
                localVarQueryParameter['IsSports'] = isSports;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchServiceApi - functional programming interface
 * @export
 */
export const SearchServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets search hints based on a search term
         * @param {string} searchTerm The search term to filter on
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {string} [userId] Optional. Supply a user id to search within a user&#x27;s library or omit to search all.
         * @param {boolean} [includePeople] 
         * @param {boolean} [includeMedia] 
         * @param {boolean} [includeGenres] 
         * @param {boolean} [includeStudios] 
         * @param {boolean} [includeArtists] 
         * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {string} [excludeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {string} [mediaTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {boolean} [isMovie] Optional filter for movies.
         * @param {boolean} [isSeries] Optional filter for movies.
         * @param {boolean} [isNews] Optional filter for news.
         * @param {boolean} [isKids] Optional filter for kids.
         * @param {boolean} [isSports] Optional filter for sports.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSearchHints(searchTerm: string, startIndex?: number, limit?: number, userId?: string, includePeople?: boolean, includeMedia?: boolean, includeGenres?: boolean, includeStudios?: boolean, includeArtists?: boolean, includeItemTypes?: string, excludeItemTypes?: string, mediaTypes?: string, isMovie?: boolean, isSeries?: boolean, isNews?: boolean, isKids?: boolean, isSports?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchSearchHintResult>> {
            const localVarAxiosArgs = await SearchServiceApiAxiosParamCreator(configuration).getSearchHints(searchTerm, startIndex, limit, userId, includePeople, includeMedia, includeGenres, includeStudios, includeArtists, includeItemTypes, excludeItemTypes, mediaTypes, isMovie, isSeries, isNews, isKids, isSports, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SearchServiceApi - factory interface
 * @export
 */
export const SearchServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets search hints based on a search term
         * @param {string} searchTerm The search term to filter on
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {string} [userId] Optional. Supply a user id to search within a user&#x27;s library or omit to search all.
         * @param {boolean} [includePeople] 
         * @param {boolean} [includeMedia] 
         * @param {boolean} [includeGenres] 
         * @param {boolean} [includeStudios] 
         * @param {boolean} [includeArtists] 
         * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {string} [excludeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {string} [mediaTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {boolean} [isMovie] Optional filter for movies.
         * @param {boolean} [isSeries] Optional filter for movies.
         * @param {boolean} [isNews] Optional filter for news.
         * @param {boolean} [isKids] Optional filter for kids.
         * @param {boolean} [isSports] Optional filter for sports.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSearchHints(searchTerm: string, startIndex?: number, limit?: number, userId?: string, includePeople?: boolean, includeMedia?: boolean, includeGenres?: boolean, includeStudios?: boolean, includeArtists?: boolean, includeItemTypes?: string, excludeItemTypes?: string, mediaTypes?: string, isMovie?: boolean, isSeries?: boolean, isNews?: boolean, isKids?: boolean, isSports?: boolean, options?: any): AxiosPromise<SearchSearchHintResult> {
            return SearchServiceApiFp(configuration).getSearchHints(searchTerm, startIndex, limit, userId, includePeople, includeMedia, includeGenres, includeStudios, includeArtists, includeItemTypes, excludeItemTypes, mediaTypes, isMovie, isSeries, isNews, isKids, isSports, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SearchServiceApi - object-oriented interface
 * @export
 * @class SearchServiceApi
 * @extends {BaseAPI}
 */
export class SearchServiceApi extends BaseAPI {
    /**
     * Requires authentication as user
     * @summary Gets search hints based on a search term
     * @param {string} searchTerm The search term to filter on
     * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
     * @param {number} [limit] Optional. The maximum number of records to return
     * @param {string} [userId] Optional. Supply a user id to search within a user&#x27;s library or omit to search all.
     * @param {boolean} [includePeople] 
     * @param {boolean} [includeMedia] 
     * @param {boolean} [includeGenres] 
     * @param {boolean} [includeStudios] 
     * @param {boolean} [includeArtists] 
     * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
     * @param {string} [excludeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
     * @param {string} [mediaTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
     * @param {boolean} [isMovie] Optional filter for movies.
     * @param {boolean} [isSeries] Optional filter for movies.
     * @param {boolean} [isNews] Optional filter for news.
     * @param {boolean} [isKids] Optional filter for kids.
     * @param {boolean} [isSports] Optional filter for sports.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchServiceApi
     */
    public getSearchHints(searchTerm: string, startIndex?: number, limit?: number, userId?: string, includePeople?: boolean, includeMedia?: boolean, includeGenres?: boolean, includeStudios?: boolean, includeArtists?: boolean, includeItemTypes?: string, excludeItemTypes?: string, mediaTypes?: string, isMovie?: boolean, isSeries?: boolean, isNews?: boolean, isKids?: boolean, isSports?: boolean, options?: any) {
        return SearchServiceApiFp(this.configuration).getSearchHints(searchTerm, startIndex, limit, userId, includePeople, includeMedia, includeGenres, includeStudios, includeArtists, includeItemTypes, excludeItemTypes, mediaTypes, isMovie, isSeries, isNews, isKids, isSports, options).then((request) => request(this.axios, this.basePath));
    }
}
