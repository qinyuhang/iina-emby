/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.1.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { MediaInfoLiveStreamRequest } from '../models';
import { MediaInfoLiveStreamResponse } from '../models';
import { MediaInfoPlaybackInfoRequest } from '../models';
import { MediaInfoPlaybackInfoResponse } from '../models';
/**
 * MediaInfoServiceApi - axios parameter creator
 * @export
 */
export const MediaInfoServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets live playback media info for an item
         * @param {string} id Item Id
         * @param {string} userId User Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByIdPlaybackinfo: async (id: string, userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getItemsByIdPlaybackinfo.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getItemsByIdPlaybackinfo.');
            }
            const localVarPath = `/Items/{Id}/PlaybackInfo`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            if (userId !== undefined) {
                localVarQueryParameter['UserId'] = userId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @param {number} size Size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlaybackBitratetest: async (size: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'size' is not null or undefined
            if (size === null || size === undefined) {
                throw new RequiredError('size','Required parameter size was null or undefined when calling getPlaybackBitratetest.');
            }
            const localVarPath = `/Playback/BitrateTest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            if (size !== undefined) {
                localVarQueryParameter['Size'] = size;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets live playback media info for an item
         * @param {MediaInfoPlaybackInfoRequest} body PlaybackInfoRequest: 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsByIdPlaybackinfo: async (body: MediaInfoPlaybackInfoRequest, id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postItemsByIdPlaybackinfo.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling postItemsByIdPlaybackinfo.');
            }
            const localVarPath = `/Items/{Id}/PlaybackInfo`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Closes a media source
         * @param {string} liveStreamId LiveStreamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLivestreamsClose: async (liveStreamId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveStreamId' is not null or undefined
            if (liveStreamId === null || liveStreamId === undefined) {
                throw new RequiredError('liveStreamId','Required parameter liveStreamId was null or undefined when calling postLivestreamsClose.');
            }
            const localVarPath = `/LiveStreams/Close`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            if (liveStreamId !== undefined) {
                localVarQueryParameter['LiveStreamId'] = liveStreamId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Closes a media source
         * @param {string} liveStreamId LiveStreamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLivestreamsMediainfo: async (liveStreamId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveStreamId' is not null or undefined
            if (liveStreamId === null || liveStreamId === undefined) {
                throw new RequiredError('liveStreamId','Required parameter liveStreamId was null or undefined when calling postLivestreamsMediainfo.');
            }
            const localVarPath = `/LiveStreams/MediaInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            if (liveStreamId !== undefined) {
                localVarQueryParameter['LiveStreamId'] = liveStreamId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Opens a media source
         * @param {MediaInfoLiveStreamRequest} body LiveStreamRequest: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLivestreamsOpen: async (body: MediaInfoLiveStreamRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postLivestreamsOpen.');
            }
            const localVarPath = `/LiveStreams/Open`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MediaInfoServiceApi - functional programming interface
 * @export
 */
export const MediaInfoServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets live playback media info for an item
         * @param {string} id Item Id
         * @param {string} userId User Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemsByIdPlaybackinfo(id: string, userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaInfoPlaybackInfoResponse>> {
            const localVarAxiosArgs = await MediaInfoServiceApiAxiosParamCreator(configuration).getItemsByIdPlaybackinfo(id, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @param {number} size Size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlaybackBitratetest(size: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await MediaInfoServiceApiAxiosParamCreator(configuration).getPlaybackBitratetest(size, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets live playback media info for an item
         * @param {MediaInfoPlaybackInfoRequest} body PlaybackInfoRequest: 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postItemsByIdPlaybackinfo(body: MediaInfoPlaybackInfoRequest, id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaInfoPlaybackInfoResponse>> {
            const localVarAxiosArgs = await MediaInfoServiceApiAxiosParamCreator(configuration).postItemsByIdPlaybackinfo(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Closes a media source
         * @param {string} liveStreamId LiveStreamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLivestreamsClose(liveStreamId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await MediaInfoServiceApiAxiosParamCreator(configuration).postLivestreamsClose(liveStreamId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Closes a media source
         * @param {string} liveStreamId LiveStreamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLivestreamsMediainfo(liveStreamId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await MediaInfoServiceApiAxiosParamCreator(configuration).postLivestreamsMediainfo(liveStreamId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Opens a media source
         * @param {MediaInfoLiveStreamRequest} body LiveStreamRequest: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLivestreamsOpen(body: MediaInfoLiveStreamRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaInfoLiveStreamResponse>> {
            const localVarAxiosArgs = await MediaInfoServiceApiAxiosParamCreator(configuration).postLivestreamsOpen(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MediaInfoServiceApi - factory interface
 * @export
 */
export const MediaInfoServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets live playback media info for an item
         * @param {string} id Item Id
         * @param {string} userId User Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByIdPlaybackinfo(id: string, userId: string, options?: any): AxiosPromise<MediaInfoPlaybackInfoResponse> {
            return MediaInfoServiceApiFp(configuration).getItemsByIdPlaybackinfo(id, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @param {number} size Size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlaybackBitratetest(size: number, options?: any): AxiosPromise<void> {
            return MediaInfoServiceApiFp(configuration).getPlaybackBitratetest(size, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets live playback media info for an item
         * @param {MediaInfoPlaybackInfoRequest} body PlaybackInfoRequest: 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsByIdPlaybackinfo(body: MediaInfoPlaybackInfoRequest, id: string, options?: any): AxiosPromise<MediaInfoPlaybackInfoResponse> {
            return MediaInfoServiceApiFp(configuration).postItemsByIdPlaybackinfo(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Closes a media source
         * @param {string} liveStreamId LiveStreamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLivestreamsClose(liveStreamId: string, options?: any): AxiosPromise<void> {
            return MediaInfoServiceApiFp(configuration).postLivestreamsClose(liveStreamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Closes a media source
         * @param {string} liveStreamId LiveStreamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLivestreamsMediainfo(liveStreamId: string, options?: any): AxiosPromise<void> {
            return MediaInfoServiceApiFp(configuration).postLivestreamsMediainfo(liveStreamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Opens a media source
         * @param {MediaInfoLiveStreamRequest} body LiveStreamRequest: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLivestreamsOpen(body: MediaInfoLiveStreamRequest, options?: any): AxiosPromise<MediaInfoLiveStreamResponse> {
            return MediaInfoServiceApiFp(configuration).postLivestreamsOpen(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MediaInfoServiceApi - object-oriented interface
 * @export
 * @class MediaInfoServiceApi
 * @extends {BaseAPI}
 */
export class MediaInfoServiceApi extends BaseAPI {
    /**
     * Requires authentication as user
     * @summary Gets live playback media info for an item
     * @param {string} id Item Id
     * @param {string} userId User Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaInfoServiceApi
     */
    public getItemsByIdPlaybackinfo(id: string, userId: string, options?: any) {
        return MediaInfoServiceApiFp(this.configuration).getItemsByIdPlaybackinfo(id, userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @param {number} size Size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaInfoServiceApi
     */
    public getPlaybackBitratetest(size: number, options?: any) {
        return MediaInfoServiceApiFp(this.configuration).getPlaybackBitratetest(size, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets live playback media info for an item
     * @param {MediaInfoPlaybackInfoRequest} body PlaybackInfoRequest: 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaInfoServiceApi
     */
    public postItemsByIdPlaybackinfo(body: MediaInfoPlaybackInfoRequest, id: string, options?: any) {
        return MediaInfoServiceApiFp(this.configuration).postItemsByIdPlaybackinfo(body, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Closes a media source
     * @param {string} liveStreamId LiveStreamId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaInfoServiceApi
     */
    public postLivestreamsClose(liveStreamId: string, options?: any) {
        return MediaInfoServiceApiFp(this.configuration).postLivestreamsClose(liveStreamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Closes a media source
     * @param {string} liveStreamId LiveStreamId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaInfoServiceApi
     */
    public postLivestreamsMediainfo(liveStreamId: string, options?: any) {
        return MediaInfoServiceApiFp(this.configuration).postLivestreamsMediainfo(liveStreamId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Opens a media source
     * @param {MediaInfoLiveStreamRequest} body LiveStreamRequest: 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaInfoServiceApi
     */
    public postLivestreamsOpen(body: MediaInfoLiveStreamRequest, options?: any) {
        return MediaInfoServiceApiFp(this.configuration).postLivestreamsOpen(body, options).then((request) => request(this.axios, this.basePath));
    }
}
