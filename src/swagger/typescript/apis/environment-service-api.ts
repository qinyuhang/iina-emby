/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.6.7.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { DefaultDirectoryBrowserInfo } from '../models';
import { IOFileSystemEntryInfo } from '../models';
import { ValidatePath } from '../models';
/**
 * EnvironmentServiceApi - axios parameter creator
 * @export
 */
export const EnvironmentServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Requires authentication as administrator
         * @summary Gets the parent path of a given path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentDefaultdirectorybrowser: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Environment/DefaultDirectoryBrowser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets the contents of a given directory in the file system
         * @param {string} path 
         * @param {boolean} [includeFiles] An optional filter to include or exclude files from the results. true/false
         * @param {boolean} [includeDirectories] An optional filter to include or exclude folders from the results. true/false
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentDirectorycontents: async (path: string, includeFiles?: boolean, includeDirectories?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'path' is not null or undefined
            if (path === null || path === undefined) {
                throw new RequiredError('path','Required parameter path was null or undefined when calling getEnvironmentDirectorycontents.');
            }
            const localVarPath = `/Environment/DirectoryContents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            if (path !== undefined) {
                localVarQueryParameter['Path'] = path;
            }

            if (includeFiles !== undefined) {
                localVarQueryParameter['IncludeFiles'] = includeFiles;
            }

            if (includeDirectories !== undefined) {
                localVarQueryParameter['IncludeDirectories'] = includeDirectories;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets available drives from the server's file system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentDrives: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Environment/Drives`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a list of devices on the network
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentNetworkdevices: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Environment/NetworkDevices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets shares from a network device
         * @param {string} path 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentNetworkshares: async (path: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'path' is not null or undefined
            if (path === null || path === undefined) {
                throw new RequiredError('path','Required parameter path was null or undefined when calling getEnvironmentNetworkshares.');
            }
            const localVarPath = `/Environment/NetworkShares`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            if (path !== undefined) {
                localVarQueryParameter['Path'] = path;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets the parent path of a given path
         * @param {string} path 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentParentpath: async (path: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'path' is not null or undefined
            if (path === null || path === undefined) {
                throw new RequiredError('path','Required parameter path was null or undefined when calling getEnvironmentParentpath.');
            }
            const localVarPath = `/Environment/ParentPath`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            if (path !== undefined) {
                localVarQueryParameter['Path'] = path;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets the contents of a given directory in the file system
         * @param {ValidatePath} body ValidatePath
         * @param {string} path 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEnvironmentValidatepath: async (body: ValidatePath, path: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postEnvironmentValidatepath.');
            }
            // verify required parameter 'path' is not null or undefined
            if (path === null || path === undefined) {
                throw new RequiredError('path','Required parameter path was null or undefined when calling postEnvironmentValidatepath.');
            }
            const localVarPath = `/Environment/ValidatePath`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            if (path !== undefined) {
                localVarQueryParameter['Path'] = path;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EnvironmentServiceApi - functional programming interface
 * @export
 */
export const EnvironmentServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Requires authentication as administrator
         * @summary Gets the parent path of a given path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnvironmentDefaultdirectorybrowser(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DefaultDirectoryBrowserInfo>> {
            const localVarAxiosArgs = await EnvironmentServiceApiAxiosParamCreator(configuration).getEnvironmentDefaultdirectorybrowser(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets the contents of a given directory in the file system
         * @param {string} path 
         * @param {boolean} [includeFiles] An optional filter to include or exclude files from the results. true/false
         * @param {boolean} [includeDirectories] An optional filter to include or exclude folders from the results. true/false
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnvironmentDirectorycontents(path: string, includeFiles?: boolean, includeDirectories?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IOFileSystemEntryInfo>>> {
            const localVarAxiosArgs = await EnvironmentServiceApiAxiosParamCreator(configuration).getEnvironmentDirectorycontents(path, includeFiles, includeDirectories, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets available drives from the server's file system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnvironmentDrives(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IOFileSystemEntryInfo>>> {
            const localVarAxiosArgs = await EnvironmentServiceApiAxiosParamCreator(configuration).getEnvironmentDrives(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a list of devices on the network
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnvironmentNetworkdevices(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IOFileSystemEntryInfo>>> {
            const localVarAxiosArgs = await EnvironmentServiceApiAxiosParamCreator(configuration).getEnvironmentNetworkdevices(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets shares from a network device
         * @param {string} path 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnvironmentNetworkshares(path: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IOFileSystemEntryInfo>>> {
            const localVarAxiosArgs = await EnvironmentServiceApiAxiosParamCreator(configuration).getEnvironmentNetworkshares(path, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets the parent path of a given path
         * @param {string} path 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnvironmentParentpath(path: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await EnvironmentServiceApiAxiosParamCreator(configuration).getEnvironmentParentpath(path, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets the contents of a given directory in the file system
         * @param {ValidatePath} body ValidatePath
         * @param {string} path 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postEnvironmentValidatepath(body: ValidatePath, path: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await EnvironmentServiceApiAxiosParamCreator(configuration).postEnvironmentValidatepath(body, path, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EnvironmentServiceApi - factory interface
 * @export
 */
export const EnvironmentServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Requires authentication as administrator
         * @summary Gets the parent path of a given path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentDefaultdirectorybrowser(options?: any): AxiosPromise<DefaultDirectoryBrowserInfo> {
            return EnvironmentServiceApiFp(configuration).getEnvironmentDefaultdirectorybrowser(options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Gets the contents of a given directory in the file system
         * @param {string} path 
         * @param {boolean} [includeFiles] An optional filter to include or exclude files from the results. true/false
         * @param {boolean} [includeDirectories] An optional filter to include or exclude folders from the results. true/false
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentDirectorycontents(path: string, includeFiles?: boolean, includeDirectories?: boolean, options?: any): AxiosPromise<Array<IOFileSystemEntryInfo>> {
            return EnvironmentServiceApiFp(configuration).getEnvironmentDirectorycontents(path, includeFiles, includeDirectories, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Gets available drives from the server's file system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentDrives(options?: any): AxiosPromise<Array<IOFileSystemEntryInfo>> {
            return EnvironmentServiceApiFp(configuration).getEnvironmentDrives(options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a list of devices on the network
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentNetworkdevices(options?: any): AxiosPromise<Array<IOFileSystemEntryInfo>> {
            return EnvironmentServiceApiFp(configuration).getEnvironmentNetworkdevices(options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Gets shares from a network device
         * @param {string} path 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentNetworkshares(path: string, options?: any): AxiosPromise<Array<IOFileSystemEntryInfo>> {
            return EnvironmentServiceApiFp(configuration).getEnvironmentNetworkshares(path, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Gets the parent path of a given path
         * @param {string} path 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentParentpath(path: string, options?: any): AxiosPromise<string> {
            return EnvironmentServiceApiFp(configuration).getEnvironmentParentpath(path, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Gets the contents of a given directory in the file system
         * @param {ValidatePath} body ValidatePath
         * @param {string} path 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEnvironmentValidatepath(body: ValidatePath, path: string, options?: any): AxiosPromise<void> {
            return EnvironmentServiceApiFp(configuration).postEnvironmentValidatepath(body, path, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EnvironmentServiceApi - object-oriented interface
 * @export
 * @class EnvironmentServiceApi
 * @extends {BaseAPI}
 */
export class EnvironmentServiceApi extends BaseAPI {
    /**
     * Requires authentication as administrator
     * @summary Gets the parent path of a given path
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentServiceApi
     */
    public getEnvironmentDefaultdirectorybrowser(options?: any) {
        return EnvironmentServiceApiFp(this.configuration).getEnvironmentDefaultdirectorybrowser(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Gets the contents of a given directory in the file system
     * @param {string} path 
     * @param {boolean} [includeFiles] An optional filter to include or exclude files from the results. true/false
     * @param {boolean} [includeDirectories] An optional filter to include or exclude folders from the results. true/false
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentServiceApi
     */
    public getEnvironmentDirectorycontents(path: string, includeFiles?: boolean, includeDirectories?: boolean, options?: any) {
        return EnvironmentServiceApiFp(this.configuration).getEnvironmentDirectorycontents(path, includeFiles, includeDirectories, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Gets available drives from the server's file system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentServiceApi
     */
    public getEnvironmentDrives(options?: any) {
        return EnvironmentServiceApiFp(this.configuration).getEnvironmentDrives(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Gets a list of devices on the network
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentServiceApi
     */
    public getEnvironmentNetworkdevices(options?: any) {
        return EnvironmentServiceApiFp(this.configuration).getEnvironmentNetworkdevices(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Gets shares from a network device
     * @param {string} path 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentServiceApi
     */
    public getEnvironmentNetworkshares(path: string, options?: any) {
        return EnvironmentServiceApiFp(this.configuration).getEnvironmentNetworkshares(path, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Gets the parent path of a given path
     * @param {string} path 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentServiceApi
     */
    public getEnvironmentParentpath(path: string, options?: any) {
        return EnvironmentServiceApiFp(this.configuration).getEnvironmentParentpath(path, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Gets the contents of a given directory in the file system
     * @param {ValidatePath} body ValidatePath
     * @param {string} path 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentServiceApi
     */
    public postEnvironmentValidatepath(body: ValidatePath, path: string, options?: any) {
        return EnvironmentServiceApiFp(this.configuration).postEnvironmentValidatepath(body, path, options).then((request) => request(this.axios, this.basePath));
    }
}
