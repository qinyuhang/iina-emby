/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.6.7.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
/**
 * DlnaServerServiceApi - axios parameter creator
 * @export
 */
export const DlnaServerServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * No authentication required
         * @summary Gets dlna connection manager xml
         * @param {string} uuId Server UuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDlnaByUuidConnectionmanagerConnectionmanager: async (uuId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuId' is not null or undefined
            if (uuId === null || uuId === undefined) {
                throw new RequiredError('uuId','Required parameter uuId was null or undefined when calling getDlnaByUuidConnectionmanagerConnectionmanager.');
            }
            const localVarPath = `/Dlna/{UuId}/connectionmanager/connectionmanager`
                .replace(`{${"UuId"}}`, encodeURIComponent(String(uuId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * No authentication required
         * @summary Gets dlna connection manager xml
         * @param {string} uuId Server UuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDlnaByUuidConnectionmanagerConnectionmanagerXml: async (uuId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuId' is not null or undefined
            if (uuId === null || uuId === undefined) {
                throw new RequiredError('uuId','Required parameter uuId was null or undefined when calling getDlnaByUuidConnectionmanagerConnectionmanagerXml.');
            }
            const localVarPath = `/Dlna/{UuId}/connectionmanager/connectionmanager.xml`
                .replace(`{${"UuId"}}`, encodeURIComponent(String(uuId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * No authentication required
         * @summary Gets dlna content directory xml
         * @param {string} uuId Server UuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDlnaByUuidContentdirectoryContentdirectory: async (uuId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuId' is not null or undefined
            if (uuId === null || uuId === undefined) {
                throw new RequiredError('uuId','Required parameter uuId was null or undefined when calling getDlnaByUuidContentdirectoryContentdirectory.');
            }
            const localVarPath = `/Dlna/{UuId}/contentdirectory/contentdirectory`
                .replace(`{${"UuId"}}`, encodeURIComponent(String(uuId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * No authentication required
         * @summary Gets dlna content directory xml
         * @param {string} uuId Server UuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDlnaByUuidContentdirectoryContentdirectoryXml: async (uuId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuId' is not null or undefined
            if (uuId === null || uuId === undefined) {
                throw new RequiredError('uuId','Required parameter uuId was null or undefined when calling getDlnaByUuidContentdirectoryContentdirectoryXml.');
            }
            const localVarPath = `/Dlna/{UuId}/contentdirectory/contentdirectory.xml`
                .replace(`{${"UuId"}}`, encodeURIComponent(String(uuId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * No authentication required
         * @summary Gets dlna server info
         * @param {string} uuId Server UuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDlnaByUuidDescription: async (uuId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuId' is not null or undefined
            if (uuId === null || uuId === undefined) {
                throw new RequiredError('uuId','Required parameter uuId was null or undefined when calling getDlnaByUuidDescription.');
            }
            const localVarPath = `/Dlna/{UuId}/description`
                .replace(`{${"UuId"}}`, encodeURIComponent(String(uuId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * No authentication required
         * @summary Gets dlna server info
         * @param {string} uuId Server UuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDlnaByUuidDescriptionXml: async (uuId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuId' is not null or undefined
            if (uuId === null || uuId === undefined) {
                throw new RequiredError('uuId','Required parameter uuId was null or undefined when calling getDlnaByUuidDescriptionXml.');
            }
            const localVarPath = `/Dlna/{UuId}/description.xml`
                .replace(`{${"UuId"}}`, encodeURIComponent(String(uuId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * No authentication required
         * @summary Gets a server icon
         * @param {string} uuId Server UuId
         * @param {string} filename The icon filename
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDlnaByUuidIconsByFilename: async (uuId: string, filename: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuId' is not null or undefined
            if (uuId === null || uuId === undefined) {
                throw new RequiredError('uuId','Required parameter uuId was null or undefined when calling getDlnaByUuidIconsByFilename.');
            }
            // verify required parameter 'filename' is not null or undefined
            if (filename === null || filename === undefined) {
                throw new RequiredError('filename','Required parameter filename was null or undefined when calling getDlnaByUuidIconsByFilename.');
            }
            const localVarPath = `/Dlna/{UuId}/icons/{Filename}`
                .replace(`{${"UuId"}}`, encodeURIComponent(String(uuId)))
                .replace(`{${"Filename"}}`, encodeURIComponent(String(filename)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * No authentication required
         * @summary Gets a server icon
         * @param {string} filename The icon filename
         * @param {string} [uuId] Server UuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDlnaIconsByFilename: async (filename: string, uuId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'filename' is not null or undefined
            if (filename === null || filename === undefined) {
                throw new RequiredError('filename','Required parameter filename was null or undefined when calling getDlnaIconsByFilename.');
            }
            const localVarPath = `/Dlna/icons/{Filename}`
                .replace(`{${"Filename"}}`, encodeURIComponent(String(filename)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (uuId !== undefined) {
                localVarQueryParameter['UuId'] = uuId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * No authentication required
         * @summary Processes a control request
         * @param {Object} body Binary stream
         * @param {string} uuId Server UuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDlnaByUuidConnectionmanagerControl: async (body: Object, uuId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postDlnaByUuidConnectionmanagerControl.');
            }
            // verify required parameter 'uuId' is not null or undefined
            if (uuId === null || uuId === undefined) {
                throw new RequiredError('uuId','Required parameter uuId was null or undefined when calling postDlnaByUuidConnectionmanagerControl.');
            }
            const localVarPath = `/Dlna/{UuId}/connectionmanager/control`
                .replace(`{${"UuId"}}`, encodeURIComponent(String(uuId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/octet-stream';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * No authentication required
         * @summary Processes a control request
         * @param {Object} body Binary stream
         * @param {string} uuId Server UuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDlnaByUuidContentdirectoryControl: async (body: Object, uuId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postDlnaByUuidContentdirectoryControl.');
            }
            // verify required parameter 'uuId' is not null or undefined
            if (uuId === null || uuId === undefined) {
                throw new RequiredError('uuId','Required parameter uuId was null or undefined when calling postDlnaByUuidContentdirectoryControl.');
            }
            const localVarPath = `/Dlna/{UuId}/contentdirectory/control`
                .replace(`{${"UuId"}}`, encodeURIComponent(String(uuId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/octet-stream';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DlnaServerServiceApi - functional programming interface
 * @export
 */
export const DlnaServerServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * No authentication required
         * @summary Gets dlna connection manager xml
         * @param {string} uuId Server UuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDlnaByUuidConnectionmanagerConnectionmanager(uuId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DlnaServerServiceApiAxiosParamCreator(configuration).getDlnaByUuidConnectionmanagerConnectionmanager(uuId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * No authentication required
         * @summary Gets dlna connection manager xml
         * @param {string} uuId Server UuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDlnaByUuidConnectionmanagerConnectionmanagerXml(uuId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DlnaServerServiceApiAxiosParamCreator(configuration).getDlnaByUuidConnectionmanagerConnectionmanagerXml(uuId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * No authentication required
         * @summary Gets dlna content directory xml
         * @param {string} uuId Server UuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDlnaByUuidContentdirectoryContentdirectory(uuId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DlnaServerServiceApiAxiosParamCreator(configuration).getDlnaByUuidContentdirectoryContentdirectory(uuId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * No authentication required
         * @summary Gets dlna content directory xml
         * @param {string} uuId Server UuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDlnaByUuidContentdirectoryContentdirectoryXml(uuId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DlnaServerServiceApiAxiosParamCreator(configuration).getDlnaByUuidContentdirectoryContentdirectoryXml(uuId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * No authentication required
         * @summary Gets dlna server info
         * @param {string} uuId Server UuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDlnaByUuidDescription(uuId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DlnaServerServiceApiAxiosParamCreator(configuration).getDlnaByUuidDescription(uuId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * No authentication required
         * @summary Gets dlna server info
         * @param {string} uuId Server UuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDlnaByUuidDescriptionXml(uuId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DlnaServerServiceApiAxiosParamCreator(configuration).getDlnaByUuidDescriptionXml(uuId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * No authentication required
         * @summary Gets a server icon
         * @param {string} uuId Server UuId
         * @param {string} filename The icon filename
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDlnaByUuidIconsByFilename(uuId: string, filename: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DlnaServerServiceApiAxiosParamCreator(configuration).getDlnaByUuidIconsByFilename(uuId, filename, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * No authentication required
         * @summary Gets a server icon
         * @param {string} filename The icon filename
         * @param {string} [uuId] Server UuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDlnaIconsByFilename(filename: string, uuId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DlnaServerServiceApiAxiosParamCreator(configuration).getDlnaIconsByFilename(filename, uuId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * No authentication required
         * @summary Processes a control request
         * @param {Object} body Binary stream
         * @param {string} uuId Server UuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postDlnaByUuidConnectionmanagerControl(body: Object, uuId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DlnaServerServiceApiAxiosParamCreator(configuration).postDlnaByUuidConnectionmanagerControl(body, uuId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * No authentication required
         * @summary Processes a control request
         * @param {Object} body Binary stream
         * @param {string} uuId Server UuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postDlnaByUuidContentdirectoryControl(body: Object, uuId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DlnaServerServiceApiAxiosParamCreator(configuration).postDlnaByUuidContentdirectoryControl(body, uuId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DlnaServerServiceApi - factory interface
 * @export
 */
export const DlnaServerServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * No authentication required
         * @summary Gets dlna connection manager xml
         * @param {string} uuId Server UuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDlnaByUuidConnectionmanagerConnectionmanager(uuId: string, options?: any): AxiosPromise<void> {
            return DlnaServerServiceApiFp(configuration).getDlnaByUuidConnectionmanagerConnectionmanager(uuId, options).then((request) => request(axios, basePath));
        },
        /**
         * No authentication required
         * @summary Gets dlna connection manager xml
         * @param {string} uuId Server UuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDlnaByUuidConnectionmanagerConnectionmanagerXml(uuId: string, options?: any): AxiosPromise<void> {
            return DlnaServerServiceApiFp(configuration).getDlnaByUuidConnectionmanagerConnectionmanagerXml(uuId, options).then((request) => request(axios, basePath));
        },
        /**
         * No authentication required
         * @summary Gets dlna content directory xml
         * @param {string} uuId Server UuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDlnaByUuidContentdirectoryContentdirectory(uuId: string, options?: any): AxiosPromise<void> {
            return DlnaServerServiceApiFp(configuration).getDlnaByUuidContentdirectoryContentdirectory(uuId, options).then((request) => request(axios, basePath));
        },
        /**
         * No authentication required
         * @summary Gets dlna content directory xml
         * @param {string} uuId Server UuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDlnaByUuidContentdirectoryContentdirectoryXml(uuId: string, options?: any): AxiosPromise<void> {
            return DlnaServerServiceApiFp(configuration).getDlnaByUuidContentdirectoryContentdirectoryXml(uuId, options).then((request) => request(axios, basePath));
        },
        /**
         * No authentication required
         * @summary Gets dlna server info
         * @param {string} uuId Server UuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDlnaByUuidDescription(uuId: string, options?: any): AxiosPromise<void> {
            return DlnaServerServiceApiFp(configuration).getDlnaByUuidDescription(uuId, options).then((request) => request(axios, basePath));
        },
        /**
         * No authentication required
         * @summary Gets dlna server info
         * @param {string} uuId Server UuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDlnaByUuidDescriptionXml(uuId: string, options?: any): AxiosPromise<void> {
            return DlnaServerServiceApiFp(configuration).getDlnaByUuidDescriptionXml(uuId, options).then((request) => request(axios, basePath));
        },
        /**
         * No authentication required
         * @summary Gets a server icon
         * @param {string} uuId Server UuId
         * @param {string} filename The icon filename
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDlnaByUuidIconsByFilename(uuId: string, filename: string, options?: any): AxiosPromise<void> {
            return DlnaServerServiceApiFp(configuration).getDlnaByUuidIconsByFilename(uuId, filename, options).then((request) => request(axios, basePath));
        },
        /**
         * No authentication required
         * @summary Gets a server icon
         * @param {string} filename The icon filename
         * @param {string} [uuId] Server UuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDlnaIconsByFilename(filename: string, uuId?: string, options?: any): AxiosPromise<void> {
            return DlnaServerServiceApiFp(configuration).getDlnaIconsByFilename(filename, uuId, options).then((request) => request(axios, basePath));
        },
        /**
         * No authentication required
         * @summary Processes a control request
         * @param {Object} body Binary stream
         * @param {string} uuId Server UuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDlnaByUuidConnectionmanagerControl(body: Object, uuId: string, options?: any): AxiosPromise<void> {
            return DlnaServerServiceApiFp(configuration).postDlnaByUuidConnectionmanagerControl(body, uuId, options).then((request) => request(axios, basePath));
        },
        /**
         * No authentication required
         * @summary Processes a control request
         * @param {Object} body Binary stream
         * @param {string} uuId Server UuId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDlnaByUuidContentdirectoryControl(body: Object, uuId: string, options?: any): AxiosPromise<void> {
            return DlnaServerServiceApiFp(configuration).postDlnaByUuidContentdirectoryControl(body, uuId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DlnaServerServiceApi - object-oriented interface
 * @export
 * @class DlnaServerServiceApi
 * @extends {BaseAPI}
 */
export class DlnaServerServiceApi extends BaseAPI {
    /**
     * No authentication required
     * @summary Gets dlna connection manager xml
     * @param {string} uuId Server UuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerServiceApi
     */
    public getDlnaByUuidConnectionmanagerConnectionmanager(uuId: string, options?: any) {
        return DlnaServerServiceApiFp(this.configuration).getDlnaByUuidConnectionmanagerConnectionmanager(uuId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * No authentication required
     * @summary Gets dlna connection manager xml
     * @param {string} uuId Server UuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerServiceApi
     */
    public getDlnaByUuidConnectionmanagerConnectionmanagerXml(uuId: string, options?: any) {
        return DlnaServerServiceApiFp(this.configuration).getDlnaByUuidConnectionmanagerConnectionmanagerXml(uuId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * No authentication required
     * @summary Gets dlna content directory xml
     * @param {string} uuId Server UuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerServiceApi
     */
    public getDlnaByUuidContentdirectoryContentdirectory(uuId: string, options?: any) {
        return DlnaServerServiceApiFp(this.configuration).getDlnaByUuidContentdirectoryContentdirectory(uuId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * No authentication required
     * @summary Gets dlna content directory xml
     * @param {string} uuId Server UuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerServiceApi
     */
    public getDlnaByUuidContentdirectoryContentdirectoryXml(uuId: string, options?: any) {
        return DlnaServerServiceApiFp(this.configuration).getDlnaByUuidContentdirectoryContentdirectoryXml(uuId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * No authentication required
     * @summary Gets dlna server info
     * @param {string} uuId Server UuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerServiceApi
     */
    public getDlnaByUuidDescription(uuId: string, options?: any) {
        return DlnaServerServiceApiFp(this.configuration).getDlnaByUuidDescription(uuId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * No authentication required
     * @summary Gets dlna server info
     * @param {string} uuId Server UuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerServiceApi
     */
    public getDlnaByUuidDescriptionXml(uuId: string, options?: any) {
        return DlnaServerServiceApiFp(this.configuration).getDlnaByUuidDescriptionXml(uuId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * No authentication required
     * @summary Gets a server icon
     * @param {string} uuId Server UuId
     * @param {string} filename The icon filename
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerServiceApi
     */
    public getDlnaByUuidIconsByFilename(uuId: string, filename: string, options?: any) {
        return DlnaServerServiceApiFp(this.configuration).getDlnaByUuidIconsByFilename(uuId, filename, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * No authentication required
     * @summary Gets a server icon
     * @param {string} filename The icon filename
     * @param {string} [uuId] Server UuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerServiceApi
     */
    public getDlnaIconsByFilename(filename: string, uuId?: string, options?: any) {
        return DlnaServerServiceApiFp(this.configuration).getDlnaIconsByFilename(filename, uuId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * No authentication required
     * @summary Processes a control request
     * @param {Object} body Binary stream
     * @param {string} uuId Server UuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerServiceApi
     */
    public postDlnaByUuidConnectionmanagerControl(body: Object, uuId: string, options?: any) {
        return DlnaServerServiceApiFp(this.configuration).postDlnaByUuidConnectionmanagerControl(body, uuId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * No authentication required
     * @summary Processes a control request
     * @param {Object} body Binary stream
     * @param {string} uuId Server UuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerServiceApi
     */
    public postDlnaByUuidContentdirectoryControl(body: Object, uuId: string, options?: any) {
        return DlnaServerServiceApiFp(this.configuration).postDlnaByUuidContentdirectoryControl(body, uuId, options).then((request) => request(this.axios, this.basePath));
    }
}
