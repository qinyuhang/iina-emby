/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.1.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
/**
 * UniversalAudioServiceApi - axios parameter creator
 * @export
 */
export const UniversalAudioServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets an audio stream
         * @param {string} id Item Id
         * @param {string} container 
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioByIdByContainer: async (id: string, container: string, deviceId?: string, startTimeTicks?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getAudioByIdByContainer.');
            }
            // verify required parameter 'container' is not null or undefined
            if (container === null || container === undefined) {
                throw new RequiredError('container','Required parameter container was null or undefined when calling getAudioByIdByContainer.');
            }
            const localVarPath = `/Audio/{Id}/universal.{Container}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"Container"}}`, encodeURIComponent(String(container)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            if (deviceId !== undefined) {
                localVarQueryParameter['DeviceId'] = deviceId;
            }

            if (startTimeTicks !== undefined) {
                localVarQueryParameter['StartTimeTicks'] = startTimeTicks;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets an audio stream
         * @param {string} id Item Id
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioByIdUniversal: async (id: string, deviceId?: string, startTimeTicks?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getAudioByIdUniversal.');
            }
            const localVarPath = `/Audio/{Id}/universal`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            if (deviceId !== undefined) {
                localVarQueryParameter['DeviceId'] = deviceId;
            }

            if (startTimeTicks !== undefined) {
                localVarQueryParameter['StartTimeTicks'] = startTimeTicks;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets an audio stream
         * @param {string} id Item Id
         * @param {string} container 
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headAudioByIdByContainer: async (id: string, container: string, deviceId?: string, startTimeTicks?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling headAudioByIdByContainer.');
            }
            // verify required parameter 'container' is not null or undefined
            if (container === null || container === undefined) {
                throw new RequiredError('container','Required parameter container was null or undefined when calling headAudioByIdByContainer.');
            }
            const localVarPath = `/Audio/{Id}/universal.{Container}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"Container"}}`, encodeURIComponent(String(container)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'HEAD', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            if (deviceId !== undefined) {
                localVarQueryParameter['DeviceId'] = deviceId;
            }

            if (startTimeTicks !== undefined) {
                localVarQueryParameter['StartTimeTicks'] = startTimeTicks;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets an audio stream
         * @param {string} id Item Id
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headAudioByIdUniversal: async (id: string, deviceId?: string, startTimeTicks?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling headAudioByIdUniversal.');
            }
            const localVarPath = `/Audio/{Id}/universal`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'HEAD', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            if (deviceId !== undefined) {
                localVarQueryParameter['DeviceId'] = deviceId;
            }

            if (startTimeTicks !== undefined) {
                localVarQueryParameter['StartTimeTicks'] = startTimeTicks;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UniversalAudioServiceApi - functional programming interface
 * @export
 */
export const UniversalAudioServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets an audio stream
         * @param {string} id Item Id
         * @param {string} container 
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAudioByIdByContainer(id: string, container: string, deviceId?: string, startTimeTicks?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UniversalAudioServiceApiAxiosParamCreator(configuration).getAudioByIdByContainer(id, container, deviceId, startTimeTicks, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets an audio stream
         * @param {string} id Item Id
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAudioByIdUniversal(id: string, deviceId?: string, startTimeTicks?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UniversalAudioServiceApiAxiosParamCreator(configuration).getAudioByIdUniversal(id, deviceId, startTimeTicks, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets an audio stream
         * @param {string} id Item Id
         * @param {string} container 
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async headAudioByIdByContainer(id: string, container: string, deviceId?: string, startTimeTicks?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UniversalAudioServiceApiAxiosParamCreator(configuration).headAudioByIdByContainer(id, container, deviceId, startTimeTicks, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets an audio stream
         * @param {string} id Item Id
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async headAudioByIdUniversal(id: string, deviceId?: string, startTimeTicks?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UniversalAudioServiceApiAxiosParamCreator(configuration).headAudioByIdUniversal(id, deviceId, startTimeTicks, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UniversalAudioServiceApi - factory interface
 * @export
 */
export const UniversalAudioServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets an audio stream
         * @param {string} id Item Id
         * @param {string} container 
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioByIdByContainer(id: string, container: string, deviceId?: string, startTimeTicks?: number, options?: any): AxiosPromise<void> {
            return UniversalAudioServiceApiFp(configuration).getAudioByIdByContainer(id, container, deviceId, startTimeTicks, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets an audio stream
         * @param {string} id Item Id
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioByIdUniversal(id: string, deviceId?: string, startTimeTicks?: number, options?: any): AxiosPromise<void> {
            return UniversalAudioServiceApiFp(configuration).getAudioByIdUniversal(id, deviceId, startTimeTicks, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets an audio stream
         * @param {string} id Item Id
         * @param {string} container 
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headAudioByIdByContainer(id: string, container: string, deviceId?: string, startTimeTicks?: number, options?: any): AxiosPromise<void> {
            return UniversalAudioServiceApiFp(configuration).headAudioByIdByContainer(id, container, deviceId, startTimeTicks, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets an audio stream
         * @param {string} id Item Id
         * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
         * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headAudioByIdUniversal(id: string, deviceId?: string, startTimeTicks?: number, options?: any): AxiosPromise<void> {
            return UniversalAudioServiceApiFp(configuration).headAudioByIdUniversal(id, deviceId, startTimeTicks, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UniversalAudioServiceApi - object-oriented interface
 * @export
 * @class UniversalAudioServiceApi
 * @extends {BaseAPI}
 */
export class UniversalAudioServiceApi extends BaseAPI {
    /**
     * Requires authentication as user
     * @summary Gets an audio stream
     * @param {string} id Item Id
     * @param {string} container 
     * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
     * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UniversalAudioServiceApi
     */
    public getAudioByIdByContainer(id: string, container: string, deviceId?: string, startTimeTicks?: number, options?: any) {
        return UniversalAudioServiceApiFp(this.configuration).getAudioByIdByContainer(id, container, deviceId, startTimeTicks, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets an audio stream
     * @param {string} id Item Id
     * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
     * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UniversalAudioServiceApi
     */
    public getAudioByIdUniversal(id: string, deviceId?: string, startTimeTicks?: number, options?: any) {
        return UniversalAudioServiceApiFp(this.configuration).getAudioByIdUniversal(id, deviceId, startTimeTicks, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets an audio stream
     * @param {string} id Item Id
     * @param {string} container 
     * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
     * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UniversalAudioServiceApi
     */
    public headAudioByIdByContainer(id: string, container: string, deviceId?: string, startTimeTicks?: number, options?: any) {
        return UniversalAudioServiceApiFp(this.configuration).headAudioByIdByContainer(id, container, deviceId, startTimeTicks, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets an audio stream
     * @param {string} id Item Id
     * @param {string} [deviceId] The device id of the client requesting. Used to stop encoding processes when needed.
     * @param {number} [startTimeTicks] Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UniversalAudioServiceApi
     */
    public headAudioByIdUniversal(id: string, deviceId?: string, startTimeTicks?: number, options?: any) {
        return UniversalAudioServiceApiFp(this.configuration).headAudioByIdUniversal(id, deviceId, startTimeTicks, options).then((request) => request(this.axios, this.basePath));
    }
}
