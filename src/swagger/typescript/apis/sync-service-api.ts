/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.1.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { QueryResultSyncModelSyncJobItem } from '../models';
import { QueryResultSyncSyncJob } from '../models';
import { SyncModelSyncDataRequest } from '../models';
import { SyncModelSyncDataResponse } from '../models';
import { SyncModelSyncDialogOptions } from '../models';
import { SyncModelSyncJobCreationResult } from '../models';
import { SyncModelSyncJobRequest } from '../models';
import { SyncModelSyncedItem } from '../models';
import { SyncModelSyncedItemProgress } from '../models';
import { SyncSyncJob } from '../models';
import { SyncSyncTarget } from '../models';
import { UsersUserAction } from '../models';
/**
 * SyncServiceApi - axios parameter creator
 * @export
 */
export const SyncServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Cancels items from a sync target
         * @param {string} targetId TargetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSyncByTargetidItems: async (targetId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'targetId' is not null or undefined
            if (targetId === null || targetId === undefined) {
                throw new RequiredError('targetId','Required parameter targetId was null or undefined when calling deleteSyncByTargetidItems.');
            }
            const localVarPath = `/Sync/{TargetId}/Items`
                .replace(`{${"TargetId"}}`, encodeURIComponent(String(targetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Cancels a sync job item
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSyncJobitemsById: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteSyncJobitemsById.');
            }
            const localVarPath = `/Sync/JobItems/{Id}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Cancels a sync job.
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSyncJobsById: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteSyncJobsById.');
            }
            const localVarPath = `/Sync/Jobs/{Id}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets ready to download sync items.
         * @param {string} targetId TargetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncItemsReady: async (targetId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'targetId' is not null or undefined
            if (targetId === null || targetId === undefined) {
                throw new RequiredError('targetId','Required parameter targetId was null or undefined when calling getSyncItemsReady.');
            }
            const localVarPath = `/Sync/Items/Ready`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            if (targetId !== undefined) {
                localVarQueryParameter['TargetId'] = targetId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets sync job items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncJobitems: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Sync/JobItems`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets a sync job item file
         * @param {string} id Id
         * @param {string} name Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncJobitemsByIdAdditionalfiles: async (id: string, name: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getSyncJobitemsByIdAdditionalfiles.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getSyncJobitemsByIdAdditionalfiles.');
            }
            const localVarPath = `/Sync/JobItems/{Id}/AdditionalFiles`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets a sync job item file
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncJobitemsByIdFile: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getSyncJobitemsByIdFile.');
            }
            const localVarPath = `/Sync/JobItems/{Id}/File`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets sync jobs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncJobs: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Sync/Jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets a sync job.
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncJobsById: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getSyncJobsById.');
            }
            const localVarPath = `/Sync/Jobs/{Id}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets a list of available sync targets.
         * @param {string} userId UserId
         * @param {string} [itemIds] ItemIds
         * @param {string} [parentId] ParentId
         * @param {string} [targetId] TargetId
         * @param {string} [category] Category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncOptions: async (userId: string, itemIds?: string, parentId?: string, targetId?: string, category?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getSyncOptions.');
            }
            const localVarPath = `/Sync/Options`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            if (userId !== undefined) {
                localVarQueryParameter['UserId'] = userId;
            }

            if (itemIds !== undefined) {
                localVarQueryParameter['ItemIds'] = itemIds;
            }

            if (parentId !== undefined) {
                localVarQueryParameter['ParentId'] = parentId;
            }

            if (targetId !== undefined) {
                localVarQueryParameter['TargetId'] = targetId;
            }

            if (category !== undefined) {
                localVarQueryParameter['Category'] = category;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets a list of available sync targets.
         * @param {string} userId UserId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncTargets: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getSyncTargets.');
            }
            const localVarPath = `/Sync/Targets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            if (userId !== undefined) {
                localVarQueryParameter['UserId'] = userId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets sync status for an item.
         * @param {SyncModelSyncedItemProgress} body SyncedItemProgress: 
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncByItemidStatus: async (body: SyncModelSyncedItemProgress, itemId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postSyncByItemidStatus.');
            }
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling postSyncByItemidStatus.');
            }
            const localVarPath = `/Sync/{ItemId}/Status`
                .replace(`{${"ItemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Syncs data between device and server
         * @param {SyncModelSyncDataRequest} body SyncDataRequest: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncData: async (body: SyncModelSyncDataRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postSyncData.');
            }
            const localVarPath = `/Sync/Data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Cancels items from a sync target
         * @param {string} [itemIds] ItemIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncItemsCancel: async (itemIds?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Sync/Items/Cancel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            if (itemIds !== undefined) {
                localVarQueryParameter['ItemIds'] = itemIds;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Enables a cancelled or queued sync job item
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncJobitemsByIdEnable: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling postSyncJobitemsByIdEnable.');
            }
            const localVarPath = `/Sync/JobItems/{Id}/Enable`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Marks a job item for removal
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncJobitemsByIdMarkforremoval: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling postSyncJobitemsByIdMarkforremoval.');
            }
            const localVarPath = `/Sync/JobItems/{Id}/MarkForRemoval`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Reports that a sync job item has successfully been transferred.
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncJobitemsByIdTransferred: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling postSyncJobitemsByIdTransferred.');
            }
            const localVarPath = `/Sync/JobItems/{Id}/Transferred`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Unmarks a job item for removal
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncJobitemsByIdUnmarkforremoval: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling postSyncJobitemsByIdUnmarkforremoval.');
            }
            const localVarPath = `/Sync/JobItems/{Id}/UnmarkForRemoval`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets sync jobs.
         * @param {SyncModelSyncJobRequest} body SyncJobRequest: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncJobs: async (body: SyncModelSyncJobRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postSyncJobs.');
            }
            const localVarPath = `/Sync/Jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Updates a sync job.
         * @param {SyncSyncJob} body SyncJob: 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncJobsById: async (body: SyncSyncJob, id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postSyncJobsById.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling postSyncJobsById.');
            }
            const localVarPath = `/Sync/Jobs/{Id}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Reports an action that occurred while offline.
         * @param {Array&lt;UsersUserAction&gt;} body List&#x60;1: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncOfflineactions: async (body: Array<UsersUserAction>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postSyncOfflineactions.');
            }
            const localVarPath = `/Sync/OfflineActions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SyncServiceApi - functional programming interface
 * @export
 */
export const SyncServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Cancels items from a sync target
         * @param {string} targetId TargetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSyncByTargetidItems(targetId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SyncServiceApiAxiosParamCreator(configuration).deleteSyncByTargetidItems(targetId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Cancels a sync job item
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSyncJobitemsById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SyncServiceApiAxiosParamCreator(configuration).deleteSyncJobitemsById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Cancels a sync job.
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSyncJobsById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SyncServiceApiAxiosParamCreator(configuration).deleteSyncJobsById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets ready to download sync items.
         * @param {string} targetId TargetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSyncItemsReady(targetId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SyncModelSyncedItem>>> {
            const localVarAxiosArgs = await SyncServiceApiAxiosParamCreator(configuration).getSyncItemsReady(targetId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets sync job items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSyncJobitems(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryResultSyncModelSyncJobItem>> {
            const localVarAxiosArgs = await SyncServiceApiAxiosParamCreator(configuration).getSyncJobitems(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets a sync job item file
         * @param {string} id Id
         * @param {string} name Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSyncJobitemsByIdAdditionalfiles(id: string, name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SyncServiceApiAxiosParamCreator(configuration).getSyncJobitemsByIdAdditionalfiles(id, name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets a sync job item file
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSyncJobitemsByIdFile(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SyncServiceApiAxiosParamCreator(configuration).getSyncJobitemsByIdFile(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets sync jobs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSyncJobs(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryResultSyncSyncJob>> {
            const localVarAxiosArgs = await SyncServiceApiAxiosParamCreator(configuration).getSyncJobs(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets a sync job.
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSyncJobsById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncSyncJob>> {
            const localVarAxiosArgs = await SyncServiceApiAxiosParamCreator(configuration).getSyncJobsById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets a list of available sync targets.
         * @param {string} userId UserId
         * @param {string} [itemIds] ItemIds
         * @param {string} [parentId] ParentId
         * @param {string} [targetId] TargetId
         * @param {string} [category] Category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSyncOptions(userId: string, itemIds?: string, parentId?: string, targetId?: string, category?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncModelSyncDialogOptions>> {
            const localVarAxiosArgs = await SyncServiceApiAxiosParamCreator(configuration).getSyncOptions(userId, itemIds, parentId, targetId, category, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets a list of available sync targets.
         * @param {string} userId UserId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSyncTargets(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SyncSyncTarget>>> {
            const localVarAxiosArgs = await SyncServiceApiAxiosParamCreator(configuration).getSyncTargets(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets sync status for an item.
         * @param {SyncModelSyncedItemProgress} body SyncedItemProgress: 
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSyncByItemidStatus(body: SyncModelSyncedItemProgress, itemId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SyncServiceApiAxiosParamCreator(configuration).postSyncByItemidStatus(body, itemId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Syncs data between device and server
         * @param {SyncModelSyncDataRequest} body SyncDataRequest: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSyncData(body: SyncModelSyncDataRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncModelSyncDataResponse>> {
            const localVarAxiosArgs = await SyncServiceApiAxiosParamCreator(configuration).postSyncData(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Cancels items from a sync target
         * @param {string} [itemIds] ItemIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSyncItemsCancel(itemIds?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SyncServiceApiAxiosParamCreator(configuration).postSyncItemsCancel(itemIds, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Enables a cancelled or queued sync job item
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSyncJobitemsByIdEnable(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SyncServiceApiAxiosParamCreator(configuration).postSyncJobitemsByIdEnable(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Marks a job item for removal
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSyncJobitemsByIdMarkforremoval(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SyncServiceApiAxiosParamCreator(configuration).postSyncJobitemsByIdMarkforremoval(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Reports that a sync job item has successfully been transferred.
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSyncJobitemsByIdTransferred(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SyncServiceApiAxiosParamCreator(configuration).postSyncJobitemsByIdTransferred(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Unmarks a job item for removal
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSyncJobitemsByIdUnmarkforremoval(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SyncServiceApiAxiosParamCreator(configuration).postSyncJobitemsByIdUnmarkforremoval(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets sync jobs.
         * @param {SyncModelSyncJobRequest} body SyncJobRequest: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSyncJobs(body: SyncModelSyncJobRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncModelSyncJobCreationResult>> {
            const localVarAxiosArgs = await SyncServiceApiAxiosParamCreator(configuration).postSyncJobs(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Updates a sync job.
         * @param {SyncSyncJob} body SyncJob: 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSyncJobsById(body: SyncSyncJob, id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SyncServiceApiAxiosParamCreator(configuration).postSyncJobsById(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Reports an action that occurred while offline.
         * @param {Array&lt;UsersUserAction&gt;} body List&#x60;1: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSyncOfflineactions(body: Array<UsersUserAction>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SyncServiceApiAxiosParamCreator(configuration).postSyncOfflineactions(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SyncServiceApi - factory interface
 * @export
 */
export const SyncServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Requires authentication as user
         * @summary Cancels items from a sync target
         * @param {string} targetId TargetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSyncByTargetidItems(targetId: string, options?: any): AxiosPromise<void> {
            return SyncServiceApiFp(configuration).deleteSyncByTargetidItems(targetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Cancels a sync job item
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSyncJobitemsById(id: string, options?: any): AxiosPromise<void> {
            return SyncServiceApiFp(configuration).deleteSyncJobitemsById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Cancels a sync job.
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSyncJobsById(id: string, options?: any): AxiosPromise<void> {
            return SyncServiceApiFp(configuration).deleteSyncJobsById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets ready to download sync items.
         * @param {string} targetId TargetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncItemsReady(targetId: string, options?: any): AxiosPromise<Array<SyncModelSyncedItem>> {
            return SyncServiceApiFp(configuration).getSyncItemsReady(targetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets sync job items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncJobitems(options?: any): AxiosPromise<QueryResultSyncModelSyncJobItem> {
            return SyncServiceApiFp(configuration).getSyncJobitems(options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets a sync job item file
         * @param {string} id Id
         * @param {string} name Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncJobitemsByIdAdditionalfiles(id: string, name: string, options?: any): AxiosPromise<void> {
            return SyncServiceApiFp(configuration).getSyncJobitemsByIdAdditionalfiles(id, name, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets a sync job item file
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncJobitemsByIdFile(id: string, options?: any): AxiosPromise<void> {
            return SyncServiceApiFp(configuration).getSyncJobitemsByIdFile(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets sync jobs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncJobs(options?: any): AxiosPromise<QueryResultSyncSyncJob> {
            return SyncServiceApiFp(configuration).getSyncJobs(options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets a sync job.
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncJobsById(id: string, options?: any): AxiosPromise<SyncSyncJob> {
            return SyncServiceApiFp(configuration).getSyncJobsById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets a list of available sync targets.
         * @param {string} userId UserId
         * @param {string} [itemIds] ItemIds
         * @param {string} [parentId] ParentId
         * @param {string} [targetId] TargetId
         * @param {string} [category] Category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncOptions(userId: string, itemIds?: string, parentId?: string, targetId?: string, category?: string, options?: any): AxiosPromise<SyncModelSyncDialogOptions> {
            return SyncServiceApiFp(configuration).getSyncOptions(userId, itemIds, parentId, targetId, category, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets a list of available sync targets.
         * @param {string} userId UserId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncTargets(userId: string, options?: any): AxiosPromise<Array<SyncSyncTarget>> {
            return SyncServiceApiFp(configuration).getSyncTargets(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets sync status for an item.
         * @param {SyncModelSyncedItemProgress} body SyncedItemProgress: 
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncByItemidStatus(body: SyncModelSyncedItemProgress, itemId: string, options?: any): AxiosPromise<void> {
            return SyncServiceApiFp(configuration).postSyncByItemidStatus(body, itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Syncs data between device and server
         * @param {SyncModelSyncDataRequest} body SyncDataRequest: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncData(body: SyncModelSyncDataRequest, options?: any): AxiosPromise<SyncModelSyncDataResponse> {
            return SyncServiceApiFp(configuration).postSyncData(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Cancels items from a sync target
         * @param {string} [itemIds] ItemIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncItemsCancel(itemIds?: string, options?: any): AxiosPromise<void> {
            return SyncServiceApiFp(configuration).postSyncItemsCancel(itemIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Enables a cancelled or queued sync job item
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncJobitemsByIdEnable(id: string, options?: any): AxiosPromise<void> {
            return SyncServiceApiFp(configuration).postSyncJobitemsByIdEnable(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Marks a job item for removal
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncJobitemsByIdMarkforremoval(id: string, options?: any): AxiosPromise<void> {
            return SyncServiceApiFp(configuration).postSyncJobitemsByIdMarkforremoval(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Reports that a sync job item has successfully been transferred.
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncJobitemsByIdTransferred(id: string, options?: any): AxiosPromise<void> {
            return SyncServiceApiFp(configuration).postSyncJobitemsByIdTransferred(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Unmarks a job item for removal
         * @param {string} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncJobitemsByIdUnmarkforremoval(id: string, options?: any): AxiosPromise<void> {
            return SyncServiceApiFp(configuration).postSyncJobitemsByIdUnmarkforremoval(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets sync jobs.
         * @param {SyncModelSyncJobRequest} body SyncJobRequest: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncJobs(body: SyncModelSyncJobRequest, options?: any): AxiosPromise<SyncModelSyncJobCreationResult> {
            return SyncServiceApiFp(configuration).postSyncJobs(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Updates a sync job.
         * @param {SyncSyncJob} body SyncJob: 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncJobsById(body: SyncSyncJob, id: number, options?: any): AxiosPromise<void> {
            return SyncServiceApiFp(configuration).postSyncJobsById(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Reports an action that occurred while offline.
         * @param {Array&lt;UsersUserAction&gt;} body List&#x60;1: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSyncOfflineactions(body: Array<UsersUserAction>, options?: any): AxiosPromise<void> {
            return SyncServiceApiFp(configuration).postSyncOfflineactions(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SyncServiceApi - object-oriented interface
 * @export
 * @class SyncServiceApi
 * @extends {BaseAPI}
 */
export class SyncServiceApi extends BaseAPI {
    /**
     * Requires authentication as user
     * @summary Cancels items from a sync target
     * @param {string} targetId TargetId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    public deleteSyncByTargetidItems(targetId: string, options?: any) {
        return SyncServiceApiFp(this.configuration).deleteSyncByTargetidItems(targetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Cancels a sync job item
     * @param {string} id Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    public deleteSyncJobitemsById(id: string, options?: any) {
        return SyncServiceApiFp(this.configuration).deleteSyncJobitemsById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Cancels a sync job.
     * @param {string} id Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    public deleteSyncJobsById(id: string, options?: any) {
        return SyncServiceApiFp(this.configuration).deleteSyncJobsById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets ready to download sync items.
     * @param {string} targetId TargetId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    public getSyncItemsReady(targetId: string, options?: any) {
        return SyncServiceApiFp(this.configuration).getSyncItemsReady(targetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets sync job items.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    public getSyncJobitems(options?: any) {
        return SyncServiceApiFp(this.configuration).getSyncJobitems(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets a sync job item file
     * @param {string} id Id
     * @param {string} name Name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    public getSyncJobitemsByIdAdditionalfiles(id: string, name: string, options?: any) {
        return SyncServiceApiFp(this.configuration).getSyncJobitemsByIdAdditionalfiles(id, name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets a sync job item file
     * @param {string} id Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    public getSyncJobitemsByIdFile(id: string, options?: any) {
        return SyncServiceApiFp(this.configuration).getSyncJobitemsByIdFile(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets sync jobs.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    public getSyncJobs(options?: any) {
        return SyncServiceApiFp(this.configuration).getSyncJobs(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets a sync job.
     * @param {string} id Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    public getSyncJobsById(id: string, options?: any) {
        return SyncServiceApiFp(this.configuration).getSyncJobsById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets a list of available sync targets.
     * @param {string} userId UserId
     * @param {string} [itemIds] ItemIds
     * @param {string} [parentId] ParentId
     * @param {string} [targetId] TargetId
     * @param {string} [category] Category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    public getSyncOptions(userId: string, itemIds?: string, parentId?: string, targetId?: string, category?: string, options?: any) {
        return SyncServiceApiFp(this.configuration).getSyncOptions(userId, itemIds, parentId, targetId, category, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets a list of available sync targets.
     * @param {string} userId UserId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    public getSyncTargets(userId: string, options?: any) {
        return SyncServiceApiFp(this.configuration).getSyncTargets(userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets sync status for an item.
     * @param {SyncModelSyncedItemProgress} body SyncedItemProgress: 
     * @param {string} itemId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    public postSyncByItemidStatus(body: SyncModelSyncedItemProgress, itemId: string, options?: any) {
        return SyncServiceApiFp(this.configuration).postSyncByItemidStatus(body, itemId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Syncs data between device and server
     * @param {SyncModelSyncDataRequest} body SyncDataRequest: 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    public postSyncData(body: SyncModelSyncDataRequest, options?: any) {
        return SyncServiceApiFp(this.configuration).postSyncData(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Cancels items from a sync target
     * @param {string} [itemIds] ItemIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    public postSyncItemsCancel(itemIds?: string, options?: any) {
        return SyncServiceApiFp(this.configuration).postSyncItemsCancel(itemIds, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Enables a cancelled or queued sync job item
     * @param {string} id Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    public postSyncJobitemsByIdEnable(id: string, options?: any) {
        return SyncServiceApiFp(this.configuration).postSyncJobitemsByIdEnable(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Marks a job item for removal
     * @param {string} id Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    public postSyncJobitemsByIdMarkforremoval(id: string, options?: any) {
        return SyncServiceApiFp(this.configuration).postSyncJobitemsByIdMarkforremoval(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Reports that a sync job item has successfully been transferred.
     * @param {string} id Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    public postSyncJobitemsByIdTransferred(id: string, options?: any) {
        return SyncServiceApiFp(this.configuration).postSyncJobitemsByIdTransferred(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Unmarks a job item for removal
     * @param {string} id Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    public postSyncJobitemsByIdUnmarkforremoval(id: string, options?: any) {
        return SyncServiceApiFp(this.configuration).postSyncJobitemsByIdUnmarkforremoval(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets sync jobs.
     * @param {SyncModelSyncJobRequest} body SyncJobRequest: 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    public postSyncJobs(body: SyncModelSyncJobRequest, options?: any) {
        return SyncServiceApiFp(this.configuration).postSyncJobs(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Updates a sync job.
     * @param {SyncSyncJob} body SyncJob: 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    public postSyncJobsById(body: SyncSyncJob, id: number, options?: any) {
        return SyncServiceApiFp(this.configuration).postSyncJobsById(body, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Reports an action that occurred while offline.
     * @param {Array&lt;UsersUserAction&gt;} body List&#x60;1: 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncServiceApi
     */
    public postSyncOfflineactions(body: Array<UsersUserAction>, options?: any) {
        return SyncServiceApiFp(this.configuration).postSyncOfflineactions(body, options).then((request) => request(this.axios, this.basePath));
    }
}
