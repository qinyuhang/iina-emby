/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.6.7.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { LibraryAddMediaPath } from '../models';
import { LibraryAddVirtualFolder } from '../models';
import { LibraryRenameVirtualFolder } from '../models';
import { LibraryUpdateLibraryOptions } from '../models';
import { LibraryUpdateMediaPath } from '../models';
import { QueryResultVirtualFolderInfo } from '../models';
/**
 * LibraryStructureServiceApi - axios parameter creator
 * @export
 */
export const LibraryStructureServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Requires authentication as administrator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLibraryVirtualfolders: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Library/VirtualFolders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLibraryVirtualfoldersPaths: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Library/VirtualFolders/Paths`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLibraryVirtualfoldersQuery: async (startIndex?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Library/VirtualFolders/Query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            if (startIndex !== undefined) {
                localVarQueryParameter['StartIndex'] = startIndex;
            }

            if (limit !== undefined) {
                localVarQueryParameter['Limit'] = limit;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @param {LibraryAddVirtualFolder} body AddVirtualFolder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLibraryVirtualfolders: async (body: LibraryAddVirtualFolder, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postLibraryVirtualfolders.');
            }
            const localVarPath = `/Library/VirtualFolders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @param {LibraryUpdateLibraryOptions} body UpdateLibraryOptions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLibraryVirtualfoldersLibraryoptions: async (body: LibraryUpdateLibraryOptions, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postLibraryVirtualfoldersLibraryoptions.');
            }
            const localVarPath = `/Library/VirtualFolders/LibraryOptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @param {LibraryRenameVirtualFolder} body RenameVirtualFolder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLibraryVirtualfoldersName: async (body: LibraryRenameVirtualFolder, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postLibraryVirtualfoldersName.');
            }
            const localVarPath = `/Library/VirtualFolders/Name`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @param {LibraryAddMediaPath} body AddMediaPath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLibraryVirtualfoldersPaths: async (body: LibraryAddMediaPath, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postLibraryVirtualfoldersPaths.');
            }
            const localVarPath = `/Library/VirtualFolders/Paths`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @param {LibraryUpdateMediaPath} body UpdateMediaPath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLibraryVirtualfoldersPathsUpdate: async (body: LibraryUpdateMediaPath, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postLibraryVirtualfoldersPathsUpdate.');
            }
            const localVarPath = `/Library/VirtualFolders/Paths/Update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LibraryStructureServiceApi - functional programming interface
 * @export
 */
export const LibraryStructureServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Requires authentication as administrator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLibraryVirtualfolders(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await LibraryStructureServiceApiAxiosParamCreator(configuration).deleteLibraryVirtualfolders(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLibraryVirtualfoldersPaths(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await LibraryStructureServiceApiAxiosParamCreator(configuration).deleteLibraryVirtualfoldersPaths(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLibraryVirtualfoldersQuery(startIndex?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryResultVirtualFolderInfo>> {
            const localVarAxiosArgs = await LibraryStructureServiceApiAxiosParamCreator(configuration).getLibraryVirtualfoldersQuery(startIndex, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @param {LibraryAddVirtualFolder} body AddVirtualFolder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLibraryVirtualfolders(body: LibraryAddVirtualFolder, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await LibraryStructureServiceApiAxiosParamCreator(configuration).postLibraryVirtualfolders(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @param {LibraryUpdateLibraryOptions} body UpdateLibraryOptions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLibraryVirtualfoldersLibraryoptions(body: LibraryUpdateLibraryOptions, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await LibraryStructureServiceApiAxiosParamCreator(configuration).postLibraryVirtualfoldersLibraryoptions(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @param {LibraryRenameVirtualFolder} body RenameVirtualFolder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLibraryVirtualfoldersName(body: LibraryRenameVirtualFolder, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await LibraryStructureServiceApiAxiosParamCreator(configuration).postLibraryVirtualfoldersName(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @param {LibraryAddMediaPath} body AddMediaPath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLibraryVirtualfoldersPaths(body: LibraryAddMediaPath, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await LibraryStructureServiceApiAxiosParamCreator(configuration).postLibraryVirtualfoldersPaths(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @param {LibraryUpdateMediaPath} body UpdateMediaPath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLibraryVirtualfoldersPathsUpdate(body: LibraryUpdateMediaPath, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await LibraryStructureServiceApiAxiosParamCreator(configuration).postLibraryVirtualfoldersPathsUpdate(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LibraryStructureServiceApi - factory interface
 * @export
 */
export const LibraryStructureServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Requires authentication as administrator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLibraryVirtualfolders(options?: any): AxiosPromise<void> {
            return LibraryStructureServiceApiFp(configuration).deleteLibraryVirtualfolders(options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLibraryVirtualfoldersPaths(options?: any): AxiosPromise<void> {
            return LibraryStructureServiceApiFp(configuration).deleteLibraryVirtualfoldersPaths(options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLibraryVirtualfoldersQuery(startIndex?: number, limit?: number, options?: any): AxiosPromise<QueryResultVirtualFolderInfo> {
            return LibraryStructureServiceApiFp(configuration).getLibraryVirtualfoldersQuery(startIndex, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @param {LibraryAddVirtualFolder} body AddVirtualFolder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLibraryVirtualfolders(body: LibraryAddVirtualFolder, options?: any): AxiosPromise<void> {
            return LibraryStructureServiceApiFp(configuration).postLibraryVirtualfolders(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @param {LibraryUpdateLibraryOptions} body UpdateLibraryOptions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLibraryVirtualfoldersLibraryoptions(body: LibraryUpdateLibraryOptions, options?: any): AxiosPromise<void> {
            return LibraryStructureServiceApiFp(configuration).postLibraryVirtualfoldersLibraryoptions(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @param {LibraryRenameVirtualFolder} body RenameVirtualFolder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLibraryVirtualfoldersName(body: LibraryRenameVirtualFolder, options?: any): AxiosPromise<void> {
            return LibraryStructureServiceApiFp(configuration).postLibraryVirtualfoldersName(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @param {LibraryAddMediaPath} body AddMediaPath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLibraryVirtualfoldersPaths(body: LibraryAddMediaPath, options?: any): AxiosPromise<void> {
            return LibraryStructureServiceApiFp(configuration).postLibraryVirtualfoldersPaths(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @param {LibraryUpdateMediaPath} body UpdateMediaPath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLibraryVirtualfoldersPathsUpdate(body: LibraryUpdateMediaPath, options?: any): AxiosPromise<void> {
            return LibraryStructureServiceApiFp(configuration).postLibraryVirtualfoldersPathsUpdate(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LibraryStructureServiceApi - object-oriented interface
 * @export
 * @class LibraryStructureServiceApi
 * @extends {BaseAPI}
 */
export class LibraryStructureServiceApi extends BaseAPI {
    /**
     * Requires authentication as administrator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryStructureServiceApi
     */
    public deleteLibraryVirtualfolders(options?: any) {
        return LibraryStructureServiceApiFp(this.configuration).deleteLibraryVirtualfolders(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryStructureServiceApi
     */
    public deleteLibraryVirtualfoldersPaths(options?: any) {
        return LibraryStructureServiceApiFp(this.configuration).deleteLibraryVirtualfoldersPaths(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
     * @param {number} [limit] Optional. The maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryStructureServiceApi
     */
    public getLibraryVirtualfoldersQuery(startIndex?: number, limit?: number, options?: any) {
        return LibraryStructureServiceApiFp(this.configuration).getLibraryVirtualfoldersQuery(startIndex, limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @param {LibraryAddVirtualFolder} body AddVirtualFolder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryStructureServiceApi
     */
    public postLibraryVirtualfolders(body: LibraryAddVirtualFolder, options?: any) {
        return LibraryStructureServiceApiFp(this.configuration).postLibraryVirtualfolders(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @param {LibraryUpdateLibraryOptions} body UpdateLibraryOptions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryStructureServiceApi
     */
    public postLibraryVirtualfoldersLibraryoptions(body: LibraryUpdateLibraryOptions, options?: any) {
        return LibraryStructureServiceApiFp(this.configuration).postLibraryVirtualfoldersLibraryoptions(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @param {LibraryRenameVirtualFolder} body RenameVirtualFolder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryStructureServiceApi
     */
    public postLibraryVirtualfoldersName(body: LibraryRenameVirtualFolder, options?: any) {
        return LibraryStructureServiceApiFp(this.configuration).postLibraryVirtualfoldersName(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @param {LibraryAddMediaPath} body AddMediaPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryStructureServiceApi
     */
    public postLibraryVirtualfoldersPaths(body: LibraryAddMediaPath, options?: any) {
        return LibraryStructureServiceApiFp(this.configuration).postLibraryVirtualfoldersPaths(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @param {LibraryUpdateMediaPath} body UpdateMediaPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryStructureServiceApi
     */
    public postLibraryVirtualfoldersPathsUpdate(body: LibraryUpdateMediaPath, options?: any) {
        return LibraryStructureServiceApiFp(this.configuration).postLibraryVirtualfoldersPathsUpdate(body, options).then((request) => request(this.axios, this.basePath));
    }
}
