/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.1.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { DlnaDeviceProfile } from '../models';
import { DlnaDeviceProfileInfo } from '../models';
/**
 * DlnaServiceApi - axios parameter creator
 * @export
 */
export const DlnaServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Requires authentication as administrator
         * @summary Deletes a profile
         * @param {string} id Profile Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDlnaProfilesById: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteDlnaProfilesById.');
            }
            const localVarPath = `/Dlna/Profiles/{Id}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a list of profiles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDlnaProfileinfos: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Dlna/ProfileInfos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a single profile
         * @param {string} id Profile Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDlnaProfilesById: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getDlnaProfilesById.');
            }
            const localVarPath = `/Dlna/Profiles/{Id}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets the default profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDlnaProfilesDefault: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Dlna/Profiles/Default`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Creates a profile
         * @param {DlnaDeviceProfile} body DeviceProfile: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDlnaProfiles: async (body: DlnaDeviceProfile, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postDlnaProfiles.');
            }
            const localVarPath = `/Dlna/Profiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Updates a profile
         * @param {DlnaDeviceProfile} body DeviceProfile: 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDlnaProfilesById: async (body: DlnaDeviceProfile, id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postDlnaProfilesById.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling postDlnaProfilesById.');
            }
            const localVarPath = `/Dlna/Profiles/{Id}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DlnaServiceApi - functional programming interface
 * @export
 */
export const DlnaServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Requires authentication as administrator
         * @summary Deletes a profile
         * @param {string} id Profile Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDlnaProfilesById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DlnaServiceApiAxiosParamCreator(configuration).deleteDlnaProfilesById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a list of profiles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDlnaProfileinfos(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DlnaDeviceProfileInfo>>> {
            const localVarAxiosArgs = await DlnaServiceApiAxiosParamCreator(configuration).getDlnaProfileinfos(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a single profile
         * @param {string} id Profile Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDlnaProfilesById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DlnaDeviceProfile>> {
            const localVarAxiosArgs = await DlnaServiceApiAxiosParamCreator(configuration).getDlnaProfilesById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets the default profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDlnaProfilesDefault(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DlnaDeviceProfile>> {
            const localVarAxiosArgs = await DlnaServiceApiAxiosParamCreator(configuration).getDlnaProfilesDefault(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Creates a profile
         * @param {DlnaDeviceProfile} body DeviceProfile: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postDlnaProfiles(body: DlnaDeviceProfile, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DlnaServiceApiAxiosParamCreator(configuration).postDlnaProfiles(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Updates a profile
         * @param {DlnaDeviceProfile} body DeviceProfile: 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postDlnaProfilesById(body: DlnaDeviceProfile, id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DlnaServiceApiAxiosParamCreator(configuration).postDlnaProfilesById(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DlnaServiceApi - factory interface
 * @export
 */
export const DlnaServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Requires authentication as administrator
         * @summary Deletes a profile
         * @param {string} id Profile Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDlnaProfilesById(id: string, options?: any): AxiosPromise<void> {
            return DlnaServiceApiFp(configuration).deleteDlnaProfilesById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a list of profiles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDlnaProfileinfos(options?: any): AxiosPromise<Array<DlnaDeviceProfileInfo>> {
            return DlnaServiceApiFp(configuration).getDlnaProfileinfos(options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a single profile
         * @param {string} id Profile Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDlnaProfilesById(id: string, options?: any): AxiosPromise<DlnaDeviceProfile> {
            return DlnaServiceApiFp(configuration).getDlnaProfilesById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Gets the default profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDlnaProfilesDefault(options?: any): AxiosPromise<DlnaDeviceProfile> {
            return DlnaServiceApiFp(configuration).getDlnaProfilesDefault(options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Creates a profile
         * @param {DlnaDeviceProfile} body DeviceProfile: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDlnaProfiles(body: DlnaDeviceProfile, options?: any): AxiosPromise<void> {
            return DlnaServiceApiFp(configuration).postDlnaProfiles(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Updates a profile
         * @param {DlnaDeviceProfile} body DeviceProfile: 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDlnaProfilesById(body: DlnaDeviceProfile, id: string, options?: any): AxiosPromise<void> {
            return DlnaServiceApiFp(configuration).postDlnaProfilesById(body, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DlnaServiceApi - object-oriented interface
 * @export
 * @class DlnaServiceApi
 * @extends {BaseAPI}
 */
export class DlnaServiceApi extends BaseAPI {
    /**
     * Requires authentication as administrator
     * @summary Deletes a profile
     * @param {string} id Profile Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServiceApi
     */
    public deleteDlnaProfilesById(id: string, options?: any) {
        return DlnaServiceApiFp(this.configuration).deleteDlnaProfilesById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Gets a list of profiles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServiceApi
     */
    public getDlnaProfileinfos(options?: any) {
        return DlnaServiceApiFp(this.configuration).getDlnaProfileinfos(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Gets a single profile
     * @param {string} id Profile Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServiceApi
     */
    public getDlnaProfilesById(id: string, options?: any) {
        return DlnaServiceApiFp(this.configuration).getDlnaProfilesById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Gets the default profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServiceApi
     */
    public getDlnaProfilesDefault(options?: any) {
        return DlnaServiceApiFp(this.configuration).getDlnaProfilesDefault(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Creates a profile
     * @param {DlnaDeviceProfile} body DeviceProfile: 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServiceApi
     */
    public postDlnaProfiles(body: DlnaDeviceProfile, options?: any) {
        return DlnaServiceApiFp(this.configuration).postDlnaProfiles(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Updates a profile
     * @param {DlnaDeviceProfile} body DeviceProfile: 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServiceApi
     */
    public postDlnaProfilesById(body: DlnaDeviceProfile, id: string, options?: any) {
        return DlnaServiceApiFp(this.configuration).postDlnaProfilesById(body, id, options).then((request) => request(this.axios, this.basePath));
    }
}
