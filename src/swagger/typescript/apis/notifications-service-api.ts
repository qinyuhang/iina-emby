/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.6.7.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { EmbyNotificationsApiNotificationResult } from '../models';
import { EmbyNotificationsApiNotificationsSummary } from '../models';
import { NameIdPair } from '../models';
import { NotificationsNotificationTypeInfo } from '../models';
/**
 * NotificationsServiceApi - axios parameter creator
 * @export
 */
export const NotificationsServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets notifications
         * @param {string} userId User Id
         * @param {boolean} [isRead] An optional filter by IsRead
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationsByUserid: async (userId: string, isRead?: boolean, startIndex?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getNotificationsByUserid.');
            }
            const localVarPath = `/Notifications/{UserId}`
                .replace(`{${"UserId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            if (isRead !== undefined) {
                localVarQueryParameter['IsRead'] = isRead;
            }

            if (startIndex !== undefined) {
                localVarQueryParameter['StartIndex'] = startIndex;
            }

            if (limit !== undefined) {
                localVarQueryParameter['Limit'] = limit;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets a notification summary for a user
         * @param {string} userId User Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationsByUseridSummary: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getNotificationsByUseridSummary.');
            }
            const localVarPath = `/Notifications/{UserId}/Summary`
                .replace(`{${"UserId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets notification types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationsServices: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Notifications/Services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets notification types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationsTypes: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Notifications/Types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Sends a notification to all admin users
         * @param {string} name The notification&#x27;s name
         * @param {string} description The notification&#x27;s description
         * @param {string} [imageUrl] The notification&#x27;s image url
         * @param {string} [url] The notification&#x27;s info url
         * @param {string} [level] The notification level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNotificationsAdmin: async (name: string, description: string, imageUrl?: string, url?: string, level?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling postNotificationsAdmin.');
            }
            // verify required parameter 'description' is not null or undefined
            if (description === null || description === undefined) {
                throw new RequiredError('description','Required parameter description was null or undefined when calling postNotificationsAdmin.');
            }
            const localVarPath = `/Notifications/Admin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (description !== undefined) {
                localVarQueryParameter['Description'] = description;
            }

            if (imageUrl !== undefined) {
                localVarQueryParameter['ImageUrl'] = imageUrl;
            }

            if (url !== undefined) {
                localVarQueryParameter['Url'] = url;
            }

            if (level !== undefined) {
                localVarQueryParameter['Level'] = level;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Marks notifications as read
         * @param {string} userId User Id
         * @param {string} ids A list of notification ids, comma delimited
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNotificationsByUseridRead: async (userId: string, ids: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling postNotificationsByUseridRead.');
            }
            // verify required parameter 'ids' is not null or undefined
            if (ids === null || ids === undefined) {
                throw new RequiredError('ids','Required parameter ids was null or undefined when calling postNotificationsByUseridRead.');
            }
            const localVarPath = `/Notifications/{UserId}/Read`
                .replace(`{${"UserId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            if (ids !== undefined) {
                localVarQueryParameter['Ids'] = ids;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Marks notifications as unread
         * @param {string} userId User Id
         * @param {string} ids A list of notification ids, comma delimited
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNotificationsByUseridUnread: async (userId: string, ids: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling postNotificationsByUseridUnread.');
            }
            // verify required parameter 'ids' is not null or undefined
            if (ids === null || ids === undefined) {
                throw new RequiredError('ids','Required parameter ids was null or undefined when calling postNotificationsByUseridUnread.');
            }
            const localVarPath = `/Notifications/{UserId}/Unread`
                .replace(`{${"UserId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            if (ids !== undefined) {
                localVarQueryParameter['Ids'] = ids;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationsServiceApi - functional programming interface
 * @export
 */
export const NotificationsServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets notifications
         * @param {string} userId User Id
         * @param {boolean} [isRead] An optional filter by IsRead
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNotificationsByUserid(userId: string, isRead?: boolean, startIndex?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmbyNotificationsApiNotificationResult>> {
            const localVarAxiosArgs = await NotificationsServiceApiAxiosParamCreator(configuration).getNotificationsByUserid(userId, isRead, startIndex, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets a notification summary for a user
         * @param {string} userId User Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNotificationsByUseridSummary(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmbyNotificationsApiNotificationsSummary>> {
            const localVarAxiosArgs = await NotificationsServiceApiAxiosParamCreator(configuration).getNotificationsByUseridSummary(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets notification types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNotificationsServices(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NameIdPair>>> {
            const localVarAxiosArgs = await NotificationsServiceApiAxiosParamCreator(configuration).getNotificationsServices(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets notification types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNotificationsTypes(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NotificationsNotificationTypeInfo>>> {
            const localVarAxiosArgs = await NotificationsServiceApiAxiosParamCreator(configuration).getNotificationsTypes(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Sends a notification to all admin users
         * @param {string} name The notification&#x27;s name
         * @param {string} description The notification&#x27;s description
         * @param {string} [imageUrl] The notification&#x27;s image url
         * @param {string} [url] The notification&#x27;s info url
         * @param {string} [level] The notification level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postNotificationsAdmin(name: string, description: string, imageUrl?: string, url?: string, level?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await NotificationsServiceApiAxiosParamCreator(configuration).postNotificationsAdmin(name, description, imageUrl, url, level, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Marks notifications as read
         * @param {string} userId User Id
         * @param {string} ids A list of notification ids, comma delimited
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postNotificationsByUseridRead(userId: string, ids: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await NotificationsServiceApiAxiosParamCreator(configuration).postNotificationsByUseridRead(userId, ids, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Marks notifications as unread
         * @param {string} userId User Id
         * @param {string} ids A list of notification ids, comma delimited
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postNotificationsByUseridUnread(userId: string, ids: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await NotificationsServiceApiAxiosParamCreator(configuration).postNotificationsByUseridUnread(userId, ids, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * NotificationsServiceApi - factory interface
 * @export
 */
export const NotificationsServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets notifications
         * @param {string} userId User Id
         * @param {boolean} [isRead] An optional filter by IsRead
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationsByUserid(userId: string, isRead?: boolean, startIndex?: number, limit?: number, options?: any): AxiosPromise<EmbyNotificationsApiNotificationResult> {
            return NotificationsServiceApiFp(configuration).getNotificationsByUserid(userId, isRead, startIndex, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets a notification summary for a user
         * @param {string} userId User Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationsByUseridSummary(userId: string, options?: any): AxiosPromise<EmbyNotificationsApiNotificationsSummary> {
            return NotificationsServiceApiFp(configuration).getNotificationsByUseridSummary(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets notification types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationsServices(options?: any): AxiosPromise<Array<NameIdPair>> {
            return NotificationsServiceApiFp(configuration).getNotificationsServices(options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets notification types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationsTypes(options?: any): AxiosPromise<Array<NotificationsNotificationTypeInfo>> {
            return NotificationsServiceApiFp(configuration).getNotificationsTypes(options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Sends a notification to all admin users
         * @param {string} name The notification&#x27;s name
         * @param {string} description The notification&#x27;s description
         * @param {string} [imageUrl] The notification&#x27;s image url
         * @param {string} [url] The notification&#x27;s info url
         * @param {string} [level] The notification level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNotificationsAdmin(name: string, description: string, imageUrl?: string, url?: string, level?: string, options?: any): AxiosPromise<void> {
            return NotificationsServiceApiFp(configuration).postNotificationsAdmin(name, description, imageUrl, url, level, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Marks notifications as read
         * @param {string} userId User Id
         * @param {string} ids A list of notification ids, comma delimited
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNotificationsByUseridRead(userId: string, ids: string, options?: any): AxiosPromise<void> {
            return NotificationsServiceApiFp(configuration).postNotificationsByUseridRead(userId, ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Marks notifications as unread
         * @param {string} userId User Id
         * @param {string} ids A list of notification ids, comma delimited
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNotificationsByUseridUnread(userId: string, ids: string, options?: any): AxiosPromise<void> {
            return NotificationsServiceApiFp(configuration).postNotificationsByUseridUnread(userId, ids, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationsServiceApi - object-oriented interface
 * @export
 * @class NotificationsServiceApi
 * @extends {BaseAPI}
 */
export class NotificationsServiceApi extends BaseAPI {
    /**
     * Requires authentication as user
     * @summary Gets notifications
     * @param {string} userId User Id
     * @param {boolean} [isRead] An optional filter by IsRead
     * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
     * @param {number} [limit] Optional. The maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsServiceApi
     */
    public getNotificationsByUserid(userId: string, isRead?: boolean, startIndex?: number, limit?: number, options?: any) {
        return NotificationsServiceApiFp(this.configuration).getNotificationsByUserid(userId, isRead, startIndex, limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets a notification summary for a user
     * @param {string} userId User Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsServiceApi
     */
    public getNotificationsByUseridSummary(userId: string, options?: any) {
        return NotificationsServiceApiFp(this.configuration).getNotificationsByUseridSummary(userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets notification types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsServiceApi
     */
    public getNotificationsServices(options?: any) {
        return NotificationsServiceApiFp(this.configuration).getNotificationsServices(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets notification types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsServiceApi
     */
    public getNotificationsTypes(options?: any) {
        return NotificationsServiceApiFp(this.configuration).getNotificationsTypes(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Sends a notification to all admin users
     * @param {string} name The notification&#x27;s name
     * @param {string} description The notification&#x27;s description
     * @param {string} [imageUrl] The notification&#x27;s image url
     * @param {string} [url] The notification&#x27;s info url
     * @param {string} [level] The notification level
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsServiceApi
     */
    public postNotificationsAdmin(name: string, description: string, imageUrl?: string, url?: string, level?: string, options?: any) {
        return NotificationsServiceApiFp(this.configuration).postNotificationsAdmin(name, description, imageUrl, url, level, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Marks notifications as read
     * @param {string} userId User Id
     * @param {string} ids A list of notification ids, comma delimited
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsServiceApi
     */
    public postNotificationsByUseridRead(userId: string, ids: string, options?: any) {
        return NotificationsServiceApiFp(this.configuration).postNotificationsByUseridRead(userId, ids, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Marks notifications as unread
     * @param {string} userId User Id
     * @param {string} ids A list of notification ids, comma delimited
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsServiceApi
     */
    public postNotificationsByUseridUnread(userId: string, ids: string, options?: any) {
        return NotificationsServiceApiFp(this.configuration).postNotificationsByUseridUnread(userId, ids, options).then((request) => request(this.axios, this.basePath));
    }
}
