/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.6.7.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { PlaylistsPlaylistCreationResult } from '../models';
import { QueryResultBaseItemDto } from '../models';
/**
 * PlaylistServiceApi - axios parameter creator
 * @export
 */
export const PlaylistServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Removes items from a playlist
         * @param {string} id 
         * @param {string} entryIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePlaylistsByIdItems: async (id: string, entryIds: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deletePlaylistsByIdItems.');
            }
            // verify required parameter 'entryIds' is not null or undefined
            if (entryIds === null || entryIds === undefined) {
                throw new RequiredError('entryIds','Required parameter entryIds was null or undefined when calling deletePlaylistsByIdItems.');
            }
            const localVarPath = `/Playlists/{Id}/Items`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            if (entryIds !== undefined) {
                localVarQueryParameter['EntryIds'] = entryIds;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets the original items of a playlist
         * @param {string} id 
         * @param {string} [userId] User Id
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
         * @param {boolean} [enableImages] Optional, include image information in output
         * @param {boolean} [enableUserData] Optional, include user data
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
         * @param {string} [enableImageTypes] Optional. The image types to include in the output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlaylistsByIdItems: async (id: string, userId?: string, startIndex?: number, limit?: number, fields?: string, enableImages?: boolean, enableUserData?: boolean, imageTypeLimit?: number, enableImageTypes?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getPlaylistsByIdItems.');
            }
            const localVarPath = `/Playlists/{Id}/Items`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            if (userId !== undefined) {
                localVarQueryParameter['UserId'] = userId;
            }

            if (startIndex !== undefined) {
                localVarQueryParameter['StartIndex'] = startIndex;
            }

            if (limit !== undefined) {
                localVarQueryParameter['Limit'] = limit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['Fields'] = fields;
            }

            if (enableImages !== undefined) {
                localVarQueryParameter['EnableImages'] = enableImages;
            }

            if (enableUserData !== undefined) {
                localVarQueryParameter['EnableUserData'] = enableUserData;
            }

            if (imageTypeLimit !== undefined) {
                localVarQueryParameter['ImageTypeLimit'] = imageTypeLimit;
            }

            if (enableImageTypes !== undefined) {
                localVarQueryParameter['EnableImageTypes'] = enableImageTypes;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Creates a new playlist
         * @param {string} [name] The name of the new playlist.
         * @param {string} [ids] Item Ids to add to the playlist
         * @param {string} [mediaType] The playlist media type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPlaylists: async (name?: string, ids?: string, mediaType?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Playlists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (ids !== undefined) {
                localVarQueryParameter['Ids'] = ids;
            }

            if (mediaType !== undefined) {
                localVarQueryParameter['MediaType'] = mediaType;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Adds items to a playlist
         * @param {string} ids Item id, comma delimited
         * @param {string} id 
         * @param {string} [userId] User Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPlaylistsByIdItems: async (ids: string, id: string, userId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            if (ids === null || ids === undefined) {
                throw new RequiredError('ids','Required parameter ids was null or undefined when calling postPlaylistsByIdItems.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling postPlaylistsByIdItems.');
            }
            const localVarPath = `/Playlists/{Id}/Items`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            if (userId !== undefined) {
                localVarQueryParameter['UserId'] = userId;
            }

            if (ids !== undefined) {
                localVarQueryParameter['Ids'] = ids;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Moves a playlist item
         * @param {number} itemId ItemId
         * @param {string} id 
         * @param {number} newIndex NewIndex
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPlaylistsByIdItemsByItemidMoveByNewindex: async (itemId: number, id: string, newIndex: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling postPlaylistsByIdItemsByItemidMoveByNewindex.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling postPlaylistsByIdItemsByItemidMoveByNewindex.');
            }
            // verify required parameter 'newIndex' is not null or undefined
            if (newIndex === null || newIndex === undefined) {
                throw new RequiredError('newIndex','Required parameter newIndex was null or undefined when calling postPlaylistsByIdItemsByItemidMoveByNewindex.');
            }
            const localVarPath = `/Playlists/{Id}/Items/{ItemId}/Move/{NewIndex}`
                .replace(`{${"ItemId"}}`, encodeURIComponent(String(itemId)))
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"NewIndex"}}`, encodeURIComponent(String(newIndex)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlaylistServiceApi - functional programming interface
 * @export
 */
export const PlaylistServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Removes items from a playlist
         * @param {string} id 
         * @param {string} entryIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePlaylistsByIdItems(id: string, entryIds: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await PlaylistServiceApiAxiosParamCreator(configuration).deletePlaylistsByIdItems(id, entryIds, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets the original items of a playlist
         * @param {string} id 
         * @param {string} [userId] User Id
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
         * @param {boolean} [enableImages] Optional, include image information in output
         * @param {boolean} [enableUserData] Optional, include user data
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
         * @param {string} [enableImageTypes] Optional. The image types to include in the output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlaylistsByIdItems(id: string, userId?: string, startIndex?: number, limit?: number, fields?: string, enableImages?: boolean, enableUserData?: boolean, imageTypeLimit?: number, enableImageTypes?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryResultBaseItemDto>> {
            const localVarAxiosArgs = await PlaylistServiceApiAxiosParamCreator(configuration).getPlaylistsByIdItems(id, userId, startIndex, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Creates a new playlist
         * @param {string} [name] The name of the new playlist.
         * @param {string} [ids] Item Ids to add to the playlist
         * @param {string} [mediaType] The playlist media type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPlaylists(name?: string, ids?: string, mediaType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlaylistsPlaylistCreationResult>> {
            const localVarAxiosArgs = await PlaylistServiceApiAxiosParamCreator(configuration).postPlaylists(name, ids, mediaType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Adds items to a playlist
         * @param {string} ids Item id, comma delimited
         * @param {string} id 
         * @param {string} [userId] User Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPlaylistsByIdItems(ids: string, id: string, userId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await PlaylistServiceApiAxiosParamCreator(configuration).postPlaylistsByIdItems(ids, id, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Moves a playlist item
         * @param {number} itemId ItemId
         * @param {string} id 
         * @param {number} newIndex NewIndex
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPlaylistsByIdItemsByItemidMoveByNewindex(itemId: number, id: string, newIndex: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await PlaylistServiceApiAxiosParamCreator(configuration).postPlaylistsByIdItemsByItemidMoveByNewindex(itemId, id, newIndex, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PlaylistServiceApi - factory interface
 * @export
 */
export const PlaylistServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Requires authentication as user
         * @summary Removes items from a playlist
         * @param {string} id 
         * @param {string} entryIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePlaylistsByIdItems(id: string, entryIds: string, options?: any): AxiosPromise<void> {
            return PlaylistServiceApiFp(configuration).deletePlaylistsByIdItems(id, entryIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets the original items of a playlist
         * @param {string} id 
         * @param {string} [userId] User Id
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
         * @param {boolean} [enableImages] Optional, include image information in output
         * @param {boolean} [enableUserData] Optional, include user data
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
         * @param {string} [enableImageTypes] Optional. The image types to include in the output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlaylistsByIdItems(id: string, userId?: string, startIndex?: number, limit?: number, fields?: string, enableImages?: boolean, enableUserData?: boolean, imageTypeLimit?: number, enableImageTypes?: string, options?: any): AxiosPromise<QueryResultBaseItemDto> {
            return PlaylistServiceApiFp(configuration).getPlaylistsByIdItems(id, userId, startIndex, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Creates a new playlist
         * @param {string} [name] The name of the new playlist.
         * @param {string} [ids] Item Ids to add to the playlist
         * @param {string} [mediaType] The playlist media type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPlaylists(name?: string, ids?: string, mediaType?: string, options?: any): AxiosPromise<PlaylistsPlaylistCreationResult> {
            return PlaylistServiceApiFp(configuration).postPlaylists(name, ids, mediaType, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Adds items to a playlist
         * @param {string} ids Item id, comma delimited
         * @param {string} id 
         * @param {string} [userId] User Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPlaylistsByIdItems(ids: string, id: string, userId?: string, options?: any): AxiosPromise<void> {
            return PlaylistServiceApiFp(configuration).postPlaylistsByIdItems(ids, id, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Moves a playlist item
         * @param {number} itemId ItemId
         * @param {string} id 
         * @param {number} newIndex NewIndex
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPlaylistsByIdItemsByItemidMoveByNewindex(itemId: number, id: string, newIndex: number, options?: any): AxiosPromise<void> {
            return PlaylistServiceApiFp(configuration).postPlaylistsByIdItemsByItemidMoveByNewindex(itemId, id, newIndex, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlaylistServiceApi - object-oriented interface
 * @export
 * @class PlaylistServiceApi
 * @extends {BaseAPI}
 */
export class PlaylistServiceApi extends BaseAPI {
    /**
     * Requires authentication as user
     * @summary Removes items from a playlist
     * @param {string} id 
     * @param {string} entryIds 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistServiceApi
     */
    public deletePlaylistsByIdItems(id: string, entryIds: string, options?: any) {
        return PlaylistServiceApiFp(this.configuration).deletePlaylistsByIdItems(id, entryIds, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets the original items of a playlist
     * @param {string} id 
     * @param {string} [userId] User Id
     * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
     * @param {number} [limit] Optional. The maximum number of records to return
     * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
     * @param {boolean} [enableImages] Optional, include image information in output
     * @param {boolean} [enableUserData] Optional, include user data
     * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
     * @param {string} [enableImageTypes] Optional. The image types to include in the output.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistServiceApi
     */
    public getPlaylistsByIdItems(id: string, userId?: string, startIndex?: number, limit?: number, fields?: string, enableImages?: boolean, enableUserData?: boolean, imageTypeLimit?: number, enableImageTypes?: string, options?: any) {
        return PlaylistServiceApiFp(this.configuration).getPlaylistsByIdItems(id, userId, startIndex, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Creates a new playlist
     * @param {string} [name] The name of the new playlist.
     * @param {string} [ids] Item Ids to add to the playlist
     * @param {string} [mediaType] The playlist media type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistServiceApi
     */
    public postPlaylists(name?: string, ids?: string, mediaType?: string, options?: any) {
        return PlaylistServiceApiFp(this.configuration).postPlaylists(name, ids, mediaType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Adds items to a playlist
     * @param {string} ids Item id, comma delimited
     * @param {string} id 
     * @param {string} [userId] User Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistServiceApi
     */
    public postPlaylistsByIdItems(ids: string, id: string, userId?: string, options?: any) {
        return PlaylistServiceApiFp(this.configuration).postPlaylistsByIdItems(ids, id, userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Moves a playlist item
     * @param {number} itemId ItemId
     * @param {string} id 
     * @param {number} newIndex NewIndex
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistServiceApi
     */
    public postPlaylistsByIdItemsByItemidMoveByNewindex(itemId: number, id: string, newIndex: number, options?: any) {
        return PlaylistServiceApiFp(this.configuration).postPlaylistsByIdItemsByItemidMoveByNewindex(itemId, id, newIndex, options).then((request) => request(this.axios, this.basePath));
    }
}
