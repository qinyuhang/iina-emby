/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.1.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ExternalIdInfo } from '../models';
import { ProvidersRemoteSearchQueryProvidersAlbumInfo } from '../models';
import { ProvidersRemoteSearchQueryProvidersArtistInfo } from '../models';
import { ProvidersRemoteSearchQueryProvidersBookInfo } from '../models';
import { ProvidersRemoteSearchQueryProvidersBoxSetInfo } from '../models';
import { ProvidersRemoteSearchQueryProvidersGameInfo } from '../models';
import { ProvidersRemoteSearchQueryProvidersMovieInfo } from '../models';
import { ProvidersRemoteSearchQueryProvidersMusicVideoInfo } from '../models';
import { ProvidersRemoteSearchQueryProvidersPersonLookupInfo } from '../models';
import { ProvidersRemoteSearchQueryProvidersSeriesInfo } from '../models';
import { ProvidersRemoteSearchQueryProvidersTrailerInfo } from '../models';
import { RemoteSearchResult } from '../models';
/**
 * ItemLookupServiceApi - axios parameter creator
 * @export
 */
export const ItemLookupServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Requires authentication as administrator
         * @summary Gets external id infos for an item
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByIdExternalidinfos: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getItemsByIdExternalidinfos.');
            }
            const localVarPath = `/Items/{Id}/ExternalIdInfos`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * No authentication required
         * @summary Gets a remote image
         * @param {string} imageUrl The image url
         * @param {string} providerName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsRemotesearchImage: async (imageUrl: string, providerName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageUrl' is not null or undefined
            if (imageUrl === null || imageUrl === undefined) {
                throw new RequiredError('imageUrl','Required parameter imageUrl was null or undefined when calling getItemsRemotesearchImage.');
            }
            // verify required parameter 'providerName' is not null or undefined
            if (providerName === null || providerName === undefined) {
                throw new RequiredError('providerName','Required parameter providerName was null or undefined when calling getItemsRemotesearchImage.');
            }
            const localVarPath = `/Items/RemoteSearch/Image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (imageUrl !== undefined) {
                localVarQueryParameter['ImageUrl'] = imageUrl;
            }

            if (providerName !== undefined) {
                localVarQueryParameter['ProviderName'] = providerName;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Applies search criteria to an item and refreshes metadata
         * @param {RemoteSearchResult} body RemoteSearchResult: 
         * @param {string} id The item id
         * @param {boolean} [replaceAllImages] Whether or not to replace all images
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchApplyById: async (body: RemoteSearchResult, id: string, replaceAllImages?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postItemsRemotesearchApplyById.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling postItemsRemotesearchApplyById.');
            }
            const localVarPath = `/Items/RemoteSearch/Apply/{Id}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            if (replaceAllImages !== undefined) {
                localVarQueryParameter['ReplaceAllImages'] = replaceAllImages;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersBookInfo} body RemoteSearchQuery&#x60;1: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchBook: async (body: ProvidersRemoteSearchQueryProvidersBookInfo, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postItemsRemotesearchBook.');
            }
            const localVarPath = `/Items/RemoteSearch/Book`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersBoxSetInfo} body RemoteSearchQuery&#x60;1: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchBoxset: async (body: ProvidersRemoteSearchQueryProvidersBoxSetInfo, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postItemsRemotesearchBoxset.');
            }
            const localVarPath = `/Items/RemoteSearch/BoxSet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersGameInfo} body RemoteSearchQuery&#x60;1: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchGame: async (body: ProvidersRemoteSearchQueryProvidersGameInfo, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postItemsRemotesearchGame.');
            }
            const localVarPath = `/Items/RemoteSearch/Game`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersMovieInfo} body RemoteSearchQuery&#x60;1: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchMovie: async (body: ProvidersRemoteSearchQueryProvidersMovieInfo, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postItemsRemotesearchMovie.');
            }
            const localVarPath = `/Items/RemoteSearch/Movie`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersAlbumInfo} body RemoteSearchQuery&#x60;1: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchMusicalbum: async (body: ProvidersRemoteSearchQueryProvidersAlbumInfo, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postItemsRemotesearchMusicalbum.');
            }
            const localVarPath = `/Items/RemoteSearch/MusicAlbum`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersArtistInfo} body RemoteSearchQuery&#x60;1: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchMusicartist: async (body: ProvidersRemoteSearchQueryProvidersArtistInfo, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postItemsRemotesearchMusicartist.');
            }
            const localVarPath = `/Items/RemoteSearch/MusicArtist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersMusicVideoInfo} body RemoteSearchQuery&#x60;1: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchMusicvideo: async (body: ProvidersRemoteSearchQueryProvidersMusicVideoInfo, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postItemsRemotesearchMusicvideo.');
            }
            const localVarPath = `/Items/RemoteSearch/MusicVideo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @param {ProvidersRemoteSearchQueryProvidersPersonLookupInfo} body RemoteSearchQuery&#x60;1: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchPerson: async (body: ProvidersRemoteSearchQueryProvidersPersonLookupInfo, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postItemsRemotesearchPerson.');
            }
            const localVarPath = `/Items/RemoteSearch/Person`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersSeriesInfo} body RemoteSearchQuery&#x60;1: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchSeries: async (body: ProvidersRemoteSearchQueryProvidersSeriesInfo, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postItemsRemotesearchSeries.');
            }
            const localVarPath = `/Items/RemoteSearch/Series`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersTrailerInfo} body RemoteSearchQuery&#x60;1: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchTrailer: async (body: ProvidersRemoteSearchQueryProvidersTrailerInfo, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postItemsRemotesearchTrailer.');
            }
            const localVarPath = `/Items/RemoteSearch/Trailer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ItemLookupServiceApi - functional programming interface
 * @export
 */
export const ItemLookupServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Requires authentication as administrator
         * @summary Gets external id infos for an item
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemsByIdExternalidinfos(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExternalIdInfo>>> {
            const localVarAxiosArgs = await ItemLookupServiceApiAxiosParamCreator(configuration).getItemsByIdExternalidinfos(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * No authentication required
         * @summary Gets a remote image
         * @param {string} imageUrl The image url
         * @param {string} providerName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemsRemotesearchImage(imageUrl: string, providerName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ItemLookupServiceApiAxiosParamCreator(configuration).getItemsRemotesearchImage(imageUrl, providerName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Applies search criteria to an item and refreshes metadata
         * @param {RemoteSearchResult} body RemoteSearchResult: 
         * @param {string} id The item id
         * @param {boolean} [replaceAllImages] Whether or not to replace all images
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postItemsRemotesearchApplyById(body: RemoteSearchResult, id: string, replaceAllImages?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ItemLookupServiceApiAxiosParamCreator(configuration).postItemsRemotesearchApplyById(body, id, replaceAllImages, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersBookInfo} body RemoteSearchQuery&#x60;1: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postItemsRemotesearchBook(body: ProvidersRemoteSearchQueryProvidersBookInfo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RemoteSearchResult>>> {
            const localVarAxiosArgs = await ItemLookupServiceApiAxiosParamCreator(configuration).postItemsRemotesearchBook(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersBoxSetInfo} body RemoteSearchQuery&#x60;1: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postItemsRemotesearchBoxset(body: ProvidersRemoteSearchQueryProvidersBoxSetInfo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RemoteSearchResult>>> {
            const localVarAxiosArgs = await ItemLookupServiceApiAxiosParamCreator(configuration).postItemsRemotesearchBoxset(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersGameInfo} body RemoteSearchQuery&#x60;1: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postItemsRemotesearchGame(body: ProvidersRemoteSearchQueryProvidersGameInfo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RemoteSearchResult>>> {
            const localVarAxiosArgs = await ItemLookupServiceApiAxiosParamCreator(configuration).postItemsRemotesearchGame(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersMovieInfo} body RemoteSearchQuery&#x60;1: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postItemsRemotesearchMovie(body: ProvidersRemoteSearchQueryProvidersMovieInfo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RemoteSearchResult>>> {
            const localVarAxiosArgs = await ItemLookupServiceApiAxiosParamCreator(configuration).postItemsRemotesearchMovie(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersAlbumInfo} body RemoteSearchQuery&#x60;1: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postItemsRemotesearchMusicalbum(body: ProvidersRemoteSearchQueryProvidersAlbumInfo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RemoteSearchResult>>> {
            const localVarAxiosArgs = await ItemLookupServiceApiAxiosParamCreator(configuration).postItemsRemotesearchMusicalbum(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersArtistInfo} body RemoteSearchQuery&#x60;1: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postItemsRemotesearchMusicartist(body: ProvidersRemoteSearchQueryProvidersArtistInfo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RemoteSearchResult>>> {
            const localVarAxiosArgs = await ItemLookupServiceApiAxiosParamCreator(configuration).postItemsRemotesearchMusicartist(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersMusicVideoInfo} body RemoteSearchQuery&#x60;1: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postItemsRemotesearchMusicvideo(body: ProvidersRemoteSearchQueryProvidersMusicVideoInfo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RemoteSearchResult>>> {
            const localVarAxiosArgs = await ItemLookupServiceApiAxiosParamCreator(configuration).postItemsRemotesearchMusicvideo(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @param {ProvidersRemoteSearchQueryProvidersPersonLookupInfo} body RemoteSearchQuery&#x60;1: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postItemsRemotesearchPerson(body: ProvidersRemoteSearchQueryProvidersPersonLookupInfo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RemoteSearchResult>>> {
            const localVarAxiosArgs = await ItemLookupServiceApiAxiosParamCreator(configuration).postItemsRemotesearchPerson(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersSeriesInfo} body RemoteSearchQuery&#x60;1: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postItemsRemotesearchSeries(body: ProvidersRemoteSearchQueryProvidersSeriesInfo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RemoteSearchResult>>> {
            const localVarAxiosArgs = await ItemLookupServiceApiAxiosParamCreator(configuration).postItemsRemotesearchSeries(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersTrailerInfo} body RemoteSearchQuery&#x60;1: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postItemsRemotesearchTrailer(body: ProvidersRemoteSearchQueryProvidersTrailerInfo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RemoteSearchResult>>> {
            const localVarAxiosArgs = await ItemLookupServiceApiAxiosParamCreator(configuration).postItemsRemotesearchTrailer(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ItemLookupServiceApi - factory interface
 * @export
 */
export const ItemLookupServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Requires authentication as administrator
         * @summary Gets external id infos for an item
         * @param {string} id Item Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsByIdExternalidinfos(id: string, options?: any): AxiosPromise<Array<ExternalIdInfo>> {
            return ItemLookupServiceApiFp(configuration).getItemsByIdExternalidinfos(id, options).then((request) => request(axios, basePath));
        },
        /**
         * No authentication required
         * @summary Gets a remote image
         * @param {string} imageUrl The image url
         * @param {string} providerName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemsRemotesearchImage(imageUrl: string, providerName: string, options?: any): AxiosPromise<void> {
            return ItemLookupServiceApiFp(configuration).getItemsRemotesearchImage(imageUrl, providerName, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Applies search criteria to an item and refreshes metadata
         * @param {RemoteSearchResult} body RemoteSearchResult: 
         * @param {string} id The item id
         * @param {boolean} [replaceAllImages] Whether or not to replace all images
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchApplyById(body: RemoteSearchResult, id: string, replaceAllImages?: boolean, options?: any): AxiosPromise<void> {
            return ItemLookupServiceApiFp(configuration).postItemsRemotesearchApplyById(body, id, replaceAllImages, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersBookInfo} body RemoteSearchQuery&#x60;1: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchBook(body: ProvidersRemoteSearchQueryProvidersBookInfo, options?: any): AxiosPromise<Array<RemoteSearchResult>> {
            return ItemLookupServiceApiFp(configuration).postItemsRemotesearchBook(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersBoxSetInfo} body RemoteSearchQuery&#x60;1: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchBoxset(body: ProvidersRemoteSearchQueryProvidersBoxSetInfo, options?: any): AxiosPromise<Array<RemoteSearchResult>> {
            return ItemLookupServiceApiFp(configuration).postItemsRemotesearchBoxset(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersGameInfo} body RemoteSearchQuery&#x60;1: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchGame(body: ProvidersRemoteSearchQueryProvidersGameInfo, options?: any): AxiosPromise<Array<RemoteSearchResult>> {
            return ItemLookupServiceApiFp(configuration).postItemsRemotesearchGame(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersMovieInfo} body RemoteSearchQuery&#x60;1: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchMovie(body: ProvidersRemoteSearchQueryProvidersMovieInfo, options?: any): AxiosPromise<Array<RemoteSearchResult>> {
            return ItemLookupServiceApiFp(configuration).postItemsRemotesearchMovie(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersAlbumInfo} body RemoteSearchQuery&#x60;1: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchMusicalbum(body: ProvidersRemoteSearchQueryProvidersAlbumInfo, options?: any): AxiosPromise<Array<RemoteSearchResult>> {
            return ItemLookupServiceApiFp(configuration).postItemsRemotesearchMusicalbum(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersArtistInfo} body RemoteSearchQuery&#x60;1: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchMusicartist(body: ProvidersRemoteSearchQueryProvidersArtistInfo, options?: any): AxiosPromise<Array<RemoteSearchResult>> {
            return ItemLookupServiceApiFp(configuration).postItemsRemotesearchMusicartist(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersMusicVideoInfo} body RemoteSearchQuery&#x60;1: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchMusicvideo(body: ProvidersRemoteSearchQueryProvidersMusicVideoInfo, options?: any): AxiosPromise<Array<RemoteSearchResult>> {
            return ItemLookupServiceApiFp(configuration).postItemsRemotesearchMusicvideo(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @param {ProvidersRemoteSearchQueryProvidersPersonLookupInfo} body RemoteSearchQuery&#x60;1: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchPerson(body: ProvidersRemoteSearchQueryProvidersPersonLookupInfo, options?: any): AxiosPromise<Array<RemoteSearchResult>> {
            return ItemLookupServiceApiFp(configuration).postItemsRemotesearchPerson(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersSeriesInfo} body RemoteSearchQuery&#x60;1: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchSeries(body: ProvidersRemoteSearchQueryProvidersSeriesInfo, options?: any): AxiosPromise<Array<RemoteSearchResult>> {
            return ItemLookupServiceApiFp(configuration).postItemsRemotesearchSeries(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @param {ProvidersRemoteSearchQueryProvidersTrailerInfo} body RemoteSearchQuery&#x60;1: 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItemsRemotesearchTrailer(body: ProvidersRemoteSearchQueryProvidersTrailerInfo, options?: any): AxiosPromise<Array<RemoteSearchResult>> {
            return ItemLookupServiceApiFp(configuration).postItemsRemotesearchTrailer(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ItemLookupServiceApi - object-oriented interface
 * @export
 * @class ItemLookupServiceApi
 * @extends {BaseAPI}
 */
export class ItemLookupServiceApi extends BaseAPI {
    /**
     * Requires authentication as administrator
     * @summary Gets external id infos for an item
     * @param {string} id Item Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemLookupServiceApi
     */
    public getItemsByIdExternalidinfos(id: string, options?: any) {
        return ItemLookupServiceApiFp(this.configuration).getItemsByIdExternalidinfos(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * No authentication required
     * @summary Gets a remote image
     * @param {string} imageUrl The image url
     * @param {string} providerName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemLookupServiceApi
     */
    public getItemsRemotesearchImage(imageUrl: string, providerName: string, options?: any) {
        return ItemLookupServiceApiFp(this.configuration).getItemsRemotesearchImage(imageUrl, providerName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Applies search criteria to an item and refreshes metadata
     * @param {RemoteSearchResult} body RemoteSearchResult: 
     * @param {string} id The item id
     * @param {boolean} [replaceAllImages] Whether or not to replace all images
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemLookupServiceApi
     */
    public postItemsRemotesearchApplyById(body: RemoteSearchResult, id: string, replaceAllImages?: boolean, options?: any) {
        return ItemLookupServiceApiFp(this.configuration).postItemsRemotesearchApplyById(body, id, replaceAllImages, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @param {ProvidersRemoteSearchQueryProvidersBookInfo} body RemoteSearchQuery&#x60;1: 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemLookupServiceApi
     */
    public postItemsRemotesearchBook(body: ProvidersRemoteSearchQueryProvidersBookInfo, options?: any) {
        return ItemLookupServiceApiFp(this.configuration).postItemsRemotesearchBook(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @param {ProvidersRemoteSearchQueryProvidersBoxSetInfo} body RemoteSearchQuery&#x60;1: 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemLookupServiceApi
     */
    public postItemsRemotesearchBoxset(body: ProvidersRemoteSearchQueryProvidersBoxSetInfo, options?: any) {
        return ItemLookupServiceApiFp(this.configuration).postItemsRemotesearchBoxset(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @param {ProvidersRemoteSearchQueryProvidersGameInfo} body RemoteSearchQuery&#x60;1: 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemLookupServiceApi
     */
    public postItemsRemotesearchGame(body: ProvidersRemoteSearchQueryProvidersGameInfo, options?: any) {
        return ItemLookupServiceApiFp(this.configuration).postItemsRemotesearchGame(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @param {ProvidersRemoteSearchQueryProvidersMovieInfo} body RemoteSearchQuery&#x60;1: 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemLookupServiceApi
     */
    public postItemsRemotesearchMovie(body: ProvidersRemoteSearchQueryProvidersMovieInfo, options?: any) {
        return ItemLookupServiceApiFp(this.configuration).postItemsRemotesearchMovie(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @param {ProvidersRemoteSearchQueryProvidersAlbumInfo} body RemoteSearchQuery&#x60;1: 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemLookupServiceApi
     */
    public postItemsRemotesearchMusicalbum(body: ProvidersRemoteSearchQueryProvidersAlbumInfo, options?: any) {
        return ItemLookupServiceApiFp(this.configuration).postItemsRemotesearchMusicalbum(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @param {ProvidersRemoteSearchQueryProvidersArtistInfo} body RemoteSearchQuery&#x60;1: 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemLookupServiceApi
     */
    public postItemsRemotesearchMusicartist(body: ProvidersRemoteSearchQueryProvidersArtistInfo, options?: any) {
        return ItemLookupServiceApiFp(this.configuration).postItemsRemotesearchMusicartist(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @param {ProvidersRemoteSearchQueryProvidersMusicVideoInfo} body RemoteSearchQuery&#x60;1: 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemLookupServiceApi
     */
    public postItemsRemotesearchMusicvideo(body: ProvidersRemoteSearchQueryProvidersMusicVideoInfo, options?: any) {
        return ItemLookupServiceApiFp(this.configuration).postItemsRemotesearchMusicvideo(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @param {ProvidersRemoteSearchQueryProvidersPersonLookupInfo} body RemoteSearchQuery&#x60;1: 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemLookupServiceApi
     */
    public postItemsRemotesearchPerson(body: ProvidersRemoteSearchQueryProvidersPersonLookupInfo, options?: any) {
        return ItemLookupServiceApiFp(this.configuration).postItemsRemotesearchPerson(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @param {ProvidersRemoteSearchQueryProvidersSeriesInfo} body RemoteSearchQuery&#x60;1: 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemLookupServiceApi
     */
    public postItemsRemotesearchSeries(body: ProvidersRemoteSearchQueryProvidersSeriesInfo, options?: any) {
        return ItemLookupServiceApiFp(this.configuration).postItemsRemotesearchSeries(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @param {ProvidersRemoteSearchQueryProvidersTrailerInfo} body RemoteSearchQuery&#x60;1: 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemLookupServiceApi
     */
    public postItemsRemotesearchTrailer(body: ProvidersRemoteSearchQueryProvidersTrailerInfo, options?: any) {
        return ItemLookupServiceApiFp(this.configuration).postItemsRemotesearchTrailer(body, options).then((request) => request(this.axios, this.basePath));
    }
}
