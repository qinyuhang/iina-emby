/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.6.7.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { NetEndPointInfo } from '../models';
import { PublicSystemInfo } from '../models';
import { QueryResultLogFile } from '../models';
import { QueryResultString } from '../models';
import { SystemInfo } from '../models';
import { UpdatesPackageVersionInfo } from '../models';
import { WakeOnLanInfo } from '../models';
/**
 * SystemServiceApi - axios parameter creator
 * @export
 */
export const SystemServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets information about the request endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemEndpoint: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/System/Endpoint`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets information about the server
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemInfo: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/System/Info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * No authentication required
         * @summary Gets public information about the server
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemInfoPublic: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/System/Info/Public`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a log file
         * @param {string} name The log file name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemLogsByName: async (name: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getSystemLogsByName.');
            }
            const localVarPath = `/System/Logs/{Name}`
                .replace(`{${"Name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a log file
         * @param {string} name The log file name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemLogsByNameLines: async (name: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getSystemLogsByNameLines.');
            }
            const localVarPath = `/System/Logs/{Name}/Lines`
                .replace(`{${"Name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a list of available server log files
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemLogsQuery: async (startIndex?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/System/Logs/Query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            if (startIndex !== undefined) {
                localVarQueryParameter['StartIndex'] = startIndex;
            }

            if (limit !== undefined) {
                localVarQueryParameter['Limit'] = limit;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * No authentication required
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPing: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/System/Ping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets release notes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemReleasenotes: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/System/ReleaseNotes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets release notes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemReleasenotesVersions: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/System/ReleaseNotes/Versions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets wake on lan information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWakeonlaninfo: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/System/WakeOnLanInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * No authentication required
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSystemPing: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/System/Ping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Restarts the application, if needed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSystemRestart: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/System/Restart`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Shuts down the application
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSystemShutdown: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/System/Shutdown`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemServiceApi - functional programming interface
 * @export
 */
export const SystemServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets information about the request endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemEndpoint(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetEndPointInfo>> {
            const localVarAxiosArgs = await SystemServiceApiAxiosParamCreator(configuration).getSystemEndpoint(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets information about the server
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemInfo(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemInfo>> {
            const localVarAxiosArgs = await SystemServiceApiAxiosParamCreator(configuration).getSystemInfo(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * No authentication required
         * @summary Gets public information about the server
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemInfoPublic(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicSystemInfo>> {
            const localVarAxiosArgs = await SystemServiceApiAxiosParamCreator(configuration).getSystemInfoPublic(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a log file
         * @param {string} name The log file name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemLogsByName(name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SystemServiceApiAxiosParamCreator(configuration).getSystemLogsByName(name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a log file
         * @param {string} name The log file name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemLogsByNameLines(name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryResultString>> {
            const localVarAxiosArgs = await SystemServiceApiAxiosParamCreator(configuration).getSystemLogsByNameLines(name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a list of available server log files
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemLogsQuery(startIndex?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryResultLogFile>> {
            const localVarAxiosArgs = await SystemServiceApiAxiosParamCreator(configuration).getSystemLogsQuery(startIndex, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * No authentication required
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemPing(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SystemServiceApiAxiosParamCreator(configuration).getSystemPing(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets release notes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemReleasenotes(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdatesPackageVersionInfo>> {
            const localVarAxiosArgs = await SystemServiceApiAxiosParamCreator(configuration).getSystemReleasenotes(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets release notes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemReleasenotesVersions(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UpdatesPackageVersionInfo>>> {
            const localVarAxiosArgs = await SystemServiceApiAxiosParamCreator(configuration).getSystemReleasenotesVersions(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as user
         * @summary Gets wake on lan information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemWakeonlaninfo(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WakeOnLanInfo>>> {
            const localVarAxiosArgs = await SystemServiceApiAxiosParamCreator(configuration).getSystemWakeonlaninfo(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * No authentication required
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSystemPing(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SystemServiceApiAxiosParamCreator(configuration).postSystemPing(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Restarts the application, if needed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSystemRestart(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SystemServiceApiAxiosParamCreator(configuration).postSystemRestart(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Requires authentication as administrator
         * @summary Shuts down the application
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSystemShutdown(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SystemServiceApiAxiosParamCreator(configuration).postSystemShutdown(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SystemServiceApi - factory interface
 * @export
 */
export const SystemServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Requires authentication as user
         * @summary Gets information about the request endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemEndpoint(options?: any): AxiosPromise<NetEndPointInfo> {
            return SystemServiceApiFp(configuration).getSystemEndpoint(options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets information about the server
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemInfo(options?: any): AxiosPromise<SystemInfo> {
            return SystemServiceApiFp(configuration).getSystemInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * No authentication required
         * @summary Gets public information about the server
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemInfoPublic(options?: any): AxiosPromise<PublicSystemInfo> {
            return SystemServiceApiFp(configuration).getSystemInfoPublic(options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a log file
         * @param {string} name The log file name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemLogsByName(name: string, options?: any): AxiosPromise<void> {
            return SystemServiceApiFp(configuration).getSystemLogsByName(name, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a log file
         * @param {string} name The log file name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemLogsByNameLines(name: string, options?: any): AxiosPromise<QueryResultString> {
            return SystemServiceApiFp(configuration).getSystemLogsByNameLines(name, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Gets a list of available server log files
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemLogsQuery(startIndex?: number, limit?: number, options?: any): AxiosPromise<QueryResultLogFile> {
            return SystemServiceApiFp(configuration).getSystemLogsQuery(startIndex, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * No authentication required
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPing(options?: any): AxiosPromise<void> {
            return SystemServiceApiFp(configuration).getSystemPing(options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets release notes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemReleasenotes(options?: any): AxiosPromise<UpdatesPackageVersionInfo> {
            return SystemServiceApiFp(configuration).getSystemReleasenotes(options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets release notes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemReleasenotesVersions(options?: any): AxiosPromise<Array<UpdatesPackageVersionInfo>> {
            return SystemServiceApiFp(configuration).getSystemReleasenotesVersions(options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as user
         * @summary Gets wake on lan information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWakeonlaninfo(options?: any): AxiosPromise<Array<WakeOnLanInfo>> {
            return SystemServiceApiFp(configuration).getSystemWakeonlaninfo(options).then((request) => request(axios, basePath));
        },
        /**
         * No authentication required
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSystemPing(options?: any): AxiosPromise<void> {
            return SystemServiceApiFp(configuration).postSystemPing(options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Restarts the application, if needed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSystemRestart(options?: any): AxiosPromise<void> {
            return SystemServiceApiFp(configuration).postSystemRestart(options).then((request) => request(axios, basePath));
        },
        /**
         * Requires authentication as administrator
         * @summary Shuts down the application
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSystemShutdown(options?: any): AxiosPromise<void> {
            return SystemServiceApiFp(configuration).postSystemShutdown(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemServiceApi - object-oriented interface
 * @export
 * @class SystemServiceApi
 * @extends {BaseAPI}
 */
export class SystemServiceApi extends BaseAPI {
    /**
     * Requires authentication as user
     * @summary Gets information about the request endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemServiceApi
     */
    public getSystemEndpoint(options?: any) {
        return SystemServiceApiFp(this.configuration).getSystemEndpoint(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets information about the server
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemServiceApi
     */
    public getSystemInfo(options?: any) {
        return SystemServiceApiFp(this.configuration).getSystemInfo(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * No authentication required
     * @summary Gets public information about the server
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemServiceApi
     */
    public getSystemInfoPublic(options?: any) {
        return SystemServiceApiFp(this.configuration).getSystemInfoPublic(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Gets a log file
     * @param {string} name The log file name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemServiceApi
     */
    public getSystemLogsByName(name: string, options?: any) {
        return SystemServiceApiFp(this.configuration).getSystemLogsByName(name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Gets a log file
     * @param {string} name The log file name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemServiceApi
     */
    public getSystemLogsByNameLines(name: string, options?: any) {
        return SystemServiceApiFp(this.configuration).getSystemLogsByNameLines(name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Gets a list of available server log files
     * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
     * @param {number} [limit] Optional. The maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemServiceApi
     */
    public getSystemLogsQuery(startIndex?: number, limit?: number, options?: any) {
        return SystemServiceApiFp(this.configuration).getSystemLogsQuery(startIndex, limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * No authentication required
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemServiceApi
     */
    public getSystemPing(options?: any) {
        return SystemServiceApiFp(this.configuration).getSystemPing(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets release notes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemServiceApi
     */
    public getSystemReleasenotes(options?: any) {
        return SystemServiceApiFp(this.configuration).getSystemReleasenotes(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets release notes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemServiceApi
     */
    public getSystemReleasenotesVersions(options?: any) {
        return SystemServiceApiFp(this.configuration).getSystemReleasenotesVersions(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as user
     * @summary Gets wake on lan information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemServiceApi
     */
    public getSystemWakeonlaninfo(options?: any) {
        return SystemServiceApiFp(this.configuration).getSystemWakeonlaninfo(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * No authentication required
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemServiceApi
     */
    public postSystemPing(options?: any) {
        return SystemServiceApiFp(this.configuration).postSystemPing(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Restarts the application, if needed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemServiceApi
     */
    public postSystemRestart(options?: any) {
        return SystemServiceApiFp(this.configuration).postSystemRestart(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Requires authentication as administrator
     * @summary Shuts down the application
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemServiceApi
     */
    public postSystemShutdown(options?: any) {
        return SystemServiceApiFp(this.configuration).postSystemShutdown(options).then((request) => request(this.axios, this.basePath));
    }
}
