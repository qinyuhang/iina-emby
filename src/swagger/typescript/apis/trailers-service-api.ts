/* tslint:disable */
/* eslint-disable */
/**
 * Emby Server API
 * Explore the Emby Server API
 *
 * OpenAPI spec version: 4.1.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { QueryResultBaseItemDto } from '../models';
/**
 * TrailersServiceApi - axios parameter creator
 * @export
 */
export const TrailersServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Finds movies and trailers similar to a given trailer.
         * @param {string} [artistType] Artist or AlbumArtist
         * @param {string} [maxOfficialRating] Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
         * @param {boolean} [hasThemeSong] Optional filter by items with theme songs.
         * @param {boolean} [hasThemeVideo] Optional filter by items with theme videos.
         * @param {boolean} [hasSubtitles] Optional filter by items with subtitles.
         * @param {boolean} [hasSpecialFeature] Optional filter by items with special features.
         * @param {boolean} [hasTrailer] Optional filter by items with trailers.
         * @param {string} [adjacentTo] Optional. Return items that are siblings of a supplied item.
         * @param {number} [minIndexNumber] Optional filter by minimum index number.
         * @param {number} [minPlayers] Optional filter by minimum number of game players.
         * @param {number} [maxPlayers] Optional filter by maximum number of game players.
         * @param {number} [parentIndexNumber] Optional filter by parent index number.
         * @param {boolean} [hasParentalRating] Optional filter by items that have or do not have a parental rating
         * @param {boolean} [isHD] Optional filter by items that are HD or not.
         * @param {string} [locationTypes] Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
         * @param {string} [excludeLocationTypes] Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
         * @param {boolean} [isMissing] Optional filter by items that are missing episodes or not.
         * @param {boolean} [isUnaired] Optional filter by items that are unaired episodes or not.
         * @param {number} [minCommunityRating] Optional filter by minimum community rating.
         * @param {number} [minCriticRating] Optional filter by minimum critic rating.
         * @param {number} [airedDuringSeason] Gets all episodes that aired during a season, including specials.
         * @param {string} [minPremiereDate] Optional. The minimum premiere date. Format &#x3D; ISO
         * @param {string} [minDateLastSaved] Optional. The minimum premiere date. Format &#x3D; ISO
         * @param {string} [minDateLastSavedForUser] Optional. The minimum premiere date. Format &#x3D; ISO
         * @param {string} [maxPremiereDate] Optional. The maximum premiere date. Format &#x3D; ISO
         * @param {boolean} [hasOverview] Optional filter by items that have an overview or not.
         * @param {boolean} [hasImdbId] Optional filter by items that have an imdb id or not.
         * @param {boolean} [hasTmdbId] Optional filter by items that have a tmdb id or not.
         * @param {boolean} [hasTvdbId] Optional filter by items that have a tvdb id or not.
         * @param {string} [excludeItemIds] Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {boolean} [recursive] When searching within folders, this determines whether or not the search will be recursive. true/false
         * @param {string} [sortOrder] Sort Order - Ascending,Descending
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root
         * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
         * @param {string} [excludeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {string} [anyProviderIdEquals] Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs.
         * @param {string} [filters] Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
         * @param {boolean} [isFavorite] Optional filter by items that are marked as favorite, or not.
         * @param {boolean} [isMovie] Optional filter for movies.
         * @param {boolean} [isSeries] Optional filter for movies.
         * @param {boolean} [isNews] Optional filter for news.
         * @param {boolean} [isKids] Optional filter for kids.
         * @param {boolean} [isSports] Optional filter for sports.
         * @param {string} [mediaTypes] Optional filter by MediaType. Allows multiple, comma delimited.
         * @param {string} [imageTypes] Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
         * @param {string} [sortBy] Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
         * @param {boolean} [isPlayed] Optional filter by items that are played, or not.
         * @param {string} [genres] Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
         * @param {string} [officialRatings] Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
         * @param {string} [tags] Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
         * @param {string} [years] Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
         * @param {boolean} [enableImages] Optional, include image information in output
         * @param {boolean} [enableUserData] Optional, include user data
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
         * @param {string} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [person] Optional. If specified, results will be filtered to include only those containing the specified person.
         * @param {string} [personIds] Optional. If specified, results will be filtered to include only those containing the specified person.
         * @param {string} [personTypes] Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
         * @param {string} [studios] Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
         * @param {string} [studioIds] Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
         * @param {string} [artists] Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
         * @param {string} [artistIds] Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
         * @param {string} [albums] Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
         * @param {string} [ids] Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited.
         * @param {string} [videoTypes] Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
         * @param {string} [containers] Optional filter by Container. Allows multiple, comma delimeted.
         * @param {string} [audioCodecs] Optional filter by AudioCodec. Allows multiple, comma delimeted.
         * @param {string} [videoCodecs] Optional filter by VideoCodec. Allows multiple, comma delimeted.
         * @param {string} [subtitleCodecs] Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
         * @param {string} [path] Optional filter by Path.
         * @param {string} [userId] User Id
         * @param {string} [minOfficialRating] Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
         * @param {boolean} [isLocked] Optional filter by items that are locked.
         * @param {boolean} [isPlaceHolder] Optional filter by items that are placeholders
         * @param {boolean} [hasOfficialRating] Optional filter by items that have official ratings
         * @param {boolean} [groupItemsIntoCollections] Whether or not to hide items behind their boxsets.
         * @param {boolean} [is3D] Optional filter by items that are 3D, or not.
         * @param {string} [seriesStatus] Optional filter by Series Status. Allows multiple, comma delimeted.
         * @param {string} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
         * @param {string} [nameStartsWith] Optional filter by items whose name is sorted equally than a given input string.
         * @param {string} [nameLessThan] Optional filter by items whose name is equally or lesser than a given input string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrailers: async (artistType?: string, maxOfficialRating?: string, hasThemeSong?: boolean, hasThemeVideo?: boolean, hasSubtitles?: boolean, hasSpecialFeature?: boolean, hasTrailer?: boolean, adjacentTo?: string, minIndexNumber?: number, minPlayers?: number, maxPlayers?: number, parentIndexNumber?: number, hasParentalRating?: boolean, isHD?: boolean, locationTypes?: string, excludeLocationTypes?: string, isMissing?: boolean, isUnaired?: boolean, minCommunityRating?: number, minCriticRating?: number, airedDuringSeason?: number, minPremiereDate?: string, minDateLastSaved?: string, minDateLastSavedForUser?: string, maxPremiereDate?: string, hasOverview?: boolean, hasImdbId?: boolean, hasTmdbId?: boolean, hasTvdbId?: boolean, excludeItemIds?: string, startIndex?: number, limit?: number, recursive?: boolean, sortOrder?: string, parentId?: string, fields?: string, excludeItemTypes?: string, includeItemTypes?: string, anyProviderIdEquals?: string, filters?: string, isFavorite?: boolean, isMovie?: boolean, isSeries?: boolean, isNews?: boolean, isKids?: boolean, isSports?: boolean, mediaTypes?: string, imageTypes?: string, sortBy?: string, isPlayed?: boolean, genres?: string, officialRatings?: string, tags?: string, years?: string, enableImages?: boolean, enableUserData?: boolean, imageTypeLimit?: number, enableImageTypes?: string, person?: string, personIds?: string, personTypes?: string, studios?: string, studioIds?: string, artists?: string, artistIds?: string, albums?: string, ids?: string, videoTypes?: string, containers?: string, audioCodecs?: string, videoCodecs?: string, subtitleCodecs?: string, path?: string, userId?: string, minOfficialRating?: string, isLocked?: boolean, isPlaceHolder?: boolean, hasOfficialRating?: boolean, groupItemsIntoCollections?: boolean, is3D?: boolean, seriesStatus?: string, nameStartsWithOrGreater?: string, nameStartsWith?: string, nameLessThan?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Trailers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyauth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("api_key")
                    : await configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            // authentication embyauth required

            if (artistType !== undefined) {
                localVarQueryParameter['ArtistType'] = artistType;
            }

            if (maxOfficialRating !== undefined) {
                localVarQueryParameter['MaxOfficialRating'] = maxOfficialRating;
            }

            if (hasThemeSong !== undefined) {
                localVarQueryParameter['HasThemeSong'] = hasThemeSong;
            }

            if (hasThemeVideo !== undefined) {
                localVarQueryParameter['HasThemeVideo'] = hasThemeVideo;
            }

            if (hasSubtitles !== undefined) {
                localVarQueryParameter['HasSubtitles'] = hasSubtitles;
            }

            if (hasSpecialFeature !== undefined) {
                localVarQueryParameter['HasSpecialFeature'] = hasSpecialFeature;
            }

            if (hasTrailer !== undefined) {
                localVarQueryParameter['HasTrailer'] = hasTrailer;
            }

            if (adjacentTo !== undefined) {
                localVarQueryParameter['AdjacentTo'] = adjacentTo;
            }

            if (minIndexNumber !== undefined) {
                localVarQueryParameter['MinIndexNumber'] = minIndexNumber;
            }

            if (minPlayers !== undefined) {
                localVarQueryParameter['MinPlayers'] = minPlayers;
            }

            if (maxPlayers !== undefined) {
                localVarQueryParameter['MaxPlayers'] = maxPlayers;
            }

            if (parentIndexNumber !== undefined) {
                localVarQueryParameter['ParentIndexNumber'] = parentIndexNumber;
            }

            if (hasParentalRating !== undefined) {
                localVarQueryParameter['HasParentalRating'] = hasParentalRating;
            }

            if (isHD !== undefined) {
                localVarQueryParameter['IsHD'] = isHD;
            }

            if (locationTypes !== undefined) {
                localVarQueryParameter['LocationTypes'] = locationTypes;
            }

            if (excludeLocationTypes !== undefined) {
                localVarQueryParameter['ExcludeLocationTypes'] = excludeLocationTypes;
            }

            if (isMissing !== undefined) {
                localVarQueryParameter['IsMissing'] = isMissing;
            }

            if (isUnaired !== undefined) {
                localVarQueryParameter['IsUnaired'] = isUnaired;
            }

            if (minCommunityRating !== undefined) {
                localVarQueryParameter['MinCommunityRating'] = minCommunityRating;
            }

            if (minCriticRating !== undefined) {
                localVarQueryParameter['MinCriticRating'] = minCriticRating;
            }

            if (airedDuringSeason !== undefined) {
                localVarQueryParameter['AiredDuringSeason'] = airedDuringSeason;
            }

            if (minPremiereDate !== undefined) {
                localVarQueryParameter['MinPremiereDate'] = minPremiereDate;
            }

            if (minDateLastSaved !== undefined) {
                localVarQueryParameter['MinDateLastSaved'] = minDateLastSaved;
            }

            if (minDateLastSavedForUser !== undefined) {
                localVarQueryParameter['MinDateLastSavedForUser'] = minDateLastSavedForUser;
            }

            if (maxPremiereDate !== undefined) {
                localVarQueryParameter['MaxPremiereDate'] = maxPremiereDate;
            }

            if (hasOverview !== undefined) {
                localVarQueryParameter['HasOverview'] = hasOverview;
            }

            if (hasImdbId !== undefined) {
                localVarQueryParameter['HasImdbId'] = hasImdbId;
            }

            if (hasTmdbId !== undefined) {
                localVarQueryParameter['HasTmdbId'] = hasTmdbId;
            }

            if (hasTvdbId !== undefined) {
                localVarQueryParameter['HasTvdbId'] = hasTvdbId;
            }

            if (excludeItemIds !== undefined) {
                localVarQueryParameter['ExcludeItemIds'] = excludeItemIds;
            }

            if (startIndex !== undefined) {
                localVarQueryParameter['StartIndex'] = startIndex;
            }

            if (limit !== undefined) {
                localVarQueryParameter['Limit'] = limit;
            }

            if (recursive !== undefined) {
                localVarQueryParameter['Recursive'] = recursive;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['SortOrder'] = sortOrder;
            }

            if (parentId !== undefined) {
                localVarQueryParameter['ParentId'] = parentId;
            }

            if (fields !== undefined) {
                localVarQueryParameter['Fields'] = fields;
            }

            if (excludeItemTypes !== undefined) {
                localVarQueryParameter['ExcludeItemTypes'] = excludeItemTypes;
            }

            if (includeItemTypes !== undefined) {
                localVarQueryParameter['IncludeItemTypes'] = includeItemTypes;
            }

            if (anyProviderIdEquals !== undefined) {
                localVarQueryParameter['AnyProviderIdEquals'] = anyProviderIdEquals;
            }

            if (filters !== undefined) {
                localVarQueryParameter['Filters'] = filters;
            }

            if (isFavorite !== undefined) {
                localVarQueryParameter['IsFavorite'] = isFavorite;
            }

            if (isMovie !== undefined) {
                localVarQueryParameter['IsMovie'] = isMovie;
            }

            if (isSeries !== undefined) {
                localVarQueryParameter['IsSeries'] = isSeries;
            }

            if (isNews !== undefined) {
                localVarQueryParameter['IsNews'] = isNews;
            }

            if (isKids !== undefined) {
                localVarQueryParameter['IsKids'] = isKids;
            }

            if (isSports !== undefined) {
                localVarQueryParameter['IsSports'] = isSports;
            }

            if (mediaTypes !== undefined) {
                localVarQueryParameter['MediaTypes'] = mediaTypes;
            }

            if (imageTypes !== undefined) {
                localVarQueryParameter['ImageTypes'] = imageTypes;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['SortBy'] = sortBy;
            }

            if (isPlayed !== undefined) {
                localVarQueryParameter['IsPlayed'] = isPlayed;
            }

            if (genres !== undefined) {
                localVarQueryParameter['Genres'] = genres;
            }

            if (officialRatings !== undefined) {
                localVarQueryParameter['OfficialRatings'] = officialRatings;
            }

            if (tags !== undefined) {
                localVarQueryParameter['Tags'] = tags;
            }

            if (years !== undefined) {
                localVarQueryParameter['Years'] = years;
            }

            if (enableImages !== undefined) {
                localVarQueryParameter['EnableImages'] = enableImages;
            }

            if (enableUserData !== undefined) {
                localVarQueryParameter['EnableUserData'] = enableUserData;
            }

            if (imageTypeLimit !== undefined) {
                localVarQueryParameter['ImageTypeLimit'] = imageTypeLimit;
            }

            if (enableImageTypes !== undefined) {
                localVarQueryParameter['EnableImageTypes'] = enableImageTypes;
            }

            if (person !== undefined) {
                localVarQueryParameter['Person'] = person;
            }

            if (personIds !== undefined) {
                localVarQueryParameter['PersonIds'] = personIds;
            }

            if (personTypes !== undefined) {
                localVarQueryParameter['PersonTypes'] = personTypes;
            }

            if (studios !== undefined) {
                localVarQueryParameter['Studios'] = studios;
            }

            if (studioIds !== undefined) {
                localVarQueryParameter['StudioIds'] = studioIds;
            }

            if (artists !== undefined) {
                localVarQueryParameter['Artists'] = artists;
            }

            if (artistIds !== undefined) {
                localVarQueryParameter['ArtistIds'] = artistIds;
            }

            if (albums !== undefined) {
                localVarQueryParameter['Albums'] = albums;
            }

            if (ids !== undefined) {
                localVarQueryParameter['Ids'] = ids;
            }

            if (videoTypes !== undefined) {
                localVarQueryParameter['VideoTypes'] = videoTypes;
            }

            if (containers !== undefined) {
                localVarQueryParameter['Containers'] = containers;
            }

            if (audioCodecs !== undefined) {
                localVarQueryParameter['AudioCodecs'] = audioCodecs;
            }

            if (videoCodecs !== undefined) {
                localVarQueryParameter['VideoCodecs'] = videoCodecs;
            }

            if (subtitleCodecs !== undefined) {
                localVarQueryParameter['SubtitleCodecs'] = subtitleCodecs;
            }

            if (path !== undefined) {
                localVarQueryParameter['Path'] = path;
            }

            if (userId !== undefined) {
                localVarQueryParameter['UserId'] = userId;
            }

            if (minOfficialRating !== undefined) {
                localVarQueryParameter['MinOfficialRating'] = minOfficialRating;
            }

            if (isLocked !== undefined) {
                localVarQueryParameter['IsLocked'] = isLocked;
            }

            if (isPlaceHolder !== undefined) {
                localVarQueryParameter['IsPlaceHolder'] = isPlaceHolder;
            }

            if (hasOfficialRating !== undefined) {
                localVarQueryParameter['HasOfficialRating'] = hasOfficialRating;
            }

            if (groupItemsIntoCollections !== undefined) {
                localVarQueryParameter['GroupItemsIntoCollections'] = groupItemsIntoCollections;
            }

            if (is3D !== undefined) {
                localVarQueryParameter['Is3D'] = is3D;
            }

            if (seriesStatus !== undefined) {
                localVarQueryParameter['SeriesStatus'] = seriesStatus;
            }

            if (nameStartsWithOrGreater !== undefined) {
                localVarQueryParameter['NameStartsWithOrGreater'] = nameStartsWithOrGreater;
            }

            if (nameStartsWith !== undefined) {
                localVarQueryParameter['NameStartsWith'] = nameStartsWith;
            }

            if (nameLessThan !== undefined) {
                localVarQueryParameter['NameLessThan'] = nameLessThan;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TrailersServiceApi - functional programming interface
 * @export
 */
export const TrailersServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Requires authentication as user
         * @summary Finds movies and trailers similar to a given trailer.
         * @param {string} [artistType] Artist or AlbumArtist
         * @param {string} [maxOfficialRating] Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
         * @param {boolean} [hasThemeSong] Optional filter by items with theme songs.
         * @param {boolean} [hasThemeVideo] Optional filter by items with theme videos.
         * @param {boolean} [hasSubtitles] Optional filter by items with subtitles.
         * @param {boolean} [hasSpecialFeature] Optional filter by items with special features.
         * @param {boolean} [hasTrailer] Optional filter by items with trailers.
         * @param {string} [adjacentTo] Optional. Return items that are siblings of a supplied item.
         * @param {number} [minIndexNumber] Optional filter by minimum index number.
         * @param {number} [minPlayers] Optional filter by minimum number of game players.
         * @param {number} [maxPlayers] Optional filter by maximum number of game players.
         * @param {number} [parentIndexNumber] Optional filter by parent index number.
         * @param {boolean} [hasParentalRating] Optional filter by items that have or do not have a parental rating
         * @param {boolean} [isHD] Optional filter by items that are HD or not.
         * @param {string} [locationTypes] Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
         * @param {string} [excludeLocationTypes] Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
         * @param {boolean} [isMissing] Optional filter by items that are missing episodes or not.
         * @param {boolean} [isUnaired] Optional filter by items that are unaired episodes or not.
         * @param {number} [minCommunityRating] Optional filter by minimum community rating.
         * @param {number} [minCriticRating] Optional filter by minimum critic rating.
         * @param {number} [airedDuringSeason] Gets all episodes that aired during a season, including specials.
         * @param {string} [minPremiereDate] Optional. The minimum premiere date. Format &#x3D; ISO
         * @param {string} [minDateLastSaved] Optional. The minimum premiere date. Format &#x3D; ISO
         * @param {string} [minDateLastSavedForUser] Optional. The minimum premiere date. Format &#x3D; ISO
         * @param {string} [maxPremiereDate] Optional. The maximum premiere date. Format &#x3D; ISO
         * @param {boolean} [hasOverview] Optional filter by items that have an overview or not.
         * @param {boolean} [hasImdbId] Optional filter by items that have an imdb id or not.
         * @param {boolean} [hasTmdbId] Optional filter by items that have a tmdb id or not.
         * @param {boolean} [hasTvdbId] Optional filter by items that have a tvdb id or not.
         * @param {string} [excludeItemIds] Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {boolean} [recursive] When searching within folders, this determines whether or not the search will be recursive. true/false
         * @param {string} [sortOrder] Sort Order - Ascending,Descending
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root
         * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
         * @param {string} [excludeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {string} [anyProviderIdEquals] Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs.
         * @param {string} [filters] Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
         * @param {boolean} [isFavorite] Optional filter by items that are marked as favorite, or not.
         * @param {boolean} [isMovie] Optional filter for movies.
         * @param {boolean} [isSeries] Optional filter for movies.
         * @param {boolean} [isNews] Optional filter for news.
         * @param {boolean} [isKids] Optional filter for kids.
         * @param {boolean} [isSports] Optional filter for sports.
         * @param {string} [mediaTypes] Optional filter by MediaType. Allows multiple, comma delimited.
         * @param {string} [imageTypes] Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
         * @param {string} [sortBy] Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
         * @param {boolean} [isPlayed] Optional filter by items that are played, or not.
         * @param {string} [genres] Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
         * @param {string} [officialRatings] Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
         * @param {string} [tags] Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
         * @param {string} [years] Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
         * @param {boolean} [enableImages] Optional, include image information in output
         * @param {boolean} [enableUserData] Optional, include user data
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
         * @param {string} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [person] Optional. If specified, results will be filtered to include only those containing the specified person.
         * @param {string} [personIds] Optional. If specified, results will be filtered to include only those containing the specified person.
         * @param {string} [personTypes] Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
         * @param {string} [studios] Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
         * @param {string} [studioIds] Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
         * @param {string} [artists] Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
         * @param {string} [artistIds] Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
         * @param {string} [albums] Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
         * @param {string} [ids] Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited.
         * @param {string} [videoTypes] Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
         * @param {string} [containers] Optional filter by Container. Allows multiple, comma delimeted.
         * @param {string} [audioCodecs] Optional filter by AudioCodec. Allows multiple, comma delimeted.
         * @param {string} [videoCodecs] Optional filter by VideoCodec. Allows multiple, comma delimeted.
         * @param {string} [subtitleCodecs] Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
         * @param {string} [path] Optional filter by Path.
         * @param {string} [userId] User Id
         * @param {string} [minOfficialRating] Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
         * @param {boolean} [isLocked] Optional filter by items that are locked.
         * @param {boolean} [isPlaceHolder] Optional filter by items that are placeholders
         * @param {boolean} [hasOfficialRating] Optional filter by items that have official ratings
         * @param {boolean} [groupItemsIntoCollections] Whether or not to hide items behind their boxsets.
         * @param {boolean} [is3D] Optional filter by items that are 3D, or not.
         * @param {string} [seriesStatus] Optional filter by Series Status. Allows multiple, comma delimeted.
         * @param {string} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
         * @param {string} [nameStartsWith] Optional filter by items whose name is sorted equally than a given input string.
         * @param {string} [nameLessThan] Optional filter by items whose name is equally or lesser than a given input string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrailers(artistType?: string, maxOfficialRating?: string, hasThemeSong?: boolean, hasThemeVideo?: boolean, hasSubtitles?: boolean, hasSpecialFeature?: boolean, hasTrailer?: boolean, adjacentTo?: string, minIndexNumber?: number, minPlayers?: number, maxPlayers?: number, parentIndexNumber?: number, hasParentalRating?: boolean, isHD?: boolean, locationTypes?: string, excludeLocationTypes?: string, isMissing?: boolean, isUnaired?: boolean, minCommunityRating?: number, minCriticRating?: number, airedDuringSeason?: number, minPremiereDate?: string, minDateLastSaved?: string, minDateLastSavedForUser?: string, maxPremiereDate?: string, hasOverview?: boolean, hasImdbId?: boolean, hasTmdbId?: boolean, hasTvdbId?: boolean, excludeItemIds?: string, startIndex?: number, limit?: number, recursive?: boolean, sortOrder?: string, parentId?: string, fields?: string, excludeItemTypes?: string, includeItemTypes?: string, anyProviderIdEquals?: string, filters?: string, isFavorite?: boolean, isMovie?: boolean, isSeries?: boolean, isNews?: boolean, isKids?: boolean, isSports?: boolean, mediaTypes?: string, imageTypes?: string, sortBy?: string, isPlayed?: boolean, genres?: string, officialRatings?: string, tags?: string, years?: string, enableImages?: boolean, enableUserData?: boolean, imageTypeLimit?: number, enableImageTypes?: string, person?: string, personIds?: string, personTypes?: string, studios?: string, studioIds?: string, artists?: string, artistIds?: string, albums?: string, ids?: string, videoTypes?: string, containers?: string, audioCodecs?: string, videoCodecs?: string, subtitleCodecs?: string, path?: string, userId?: string, minOfficialRating?: string, isLocked?: boolean, isPlaceHolder?: boolean, hasOfficialRating?: boolean, groupItemsIntoCollections?: boolean, is3D?: boolean, seriesStatus?: string, nameStartsWithOrGreater?: string, nameStartsWith?: string, nameLessThan?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryResultBaseItemDto>> {
            const localVarAxiosArgs = await TrailersServiceApiAxiosParamCreator(configuration).getTrailers(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isNews, isKids, isSports, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, nameStartsWith, nameLessThan, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TrailersServiceApi - factory interface
 * @export
 */
export const TrailersServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Requires authentication as user
         * @summary Finds movies and trailers similar to a given trailer.
         * @param {string} [artistType] Artist or AlbumArtist
         * @param {string} [maxOfficialRating] Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
         * @param {boolean} [hasThemeSong] Optional filter by items with theme songs.
         * @param {boolean} [hasThemeVideo] Optional filter by items with theme videos.
         * @param {boolean} [hasSubtitles] Optional filter by items with subtitles.
         * @param {boolean} [hasSpecialFeature] Optional filter by items with special features.
         * @param {boolean} [hasTrailer] Optional filter by items with trailers.
         * @param {string} [adjacentTo] Optional. Return items that are siblings of a supplied item.
         * @param {number} [minIndexNumber] Optional filter by minimum index number.
         * @param {number} [minPlayers] Optional filter by minimum number of game players.
         * @param {number} [maxPlayers] Optional filter by maximum number of game players.
         * @param {number} [parentIndexNumber] Optional filter by parent index number.
         * @param {boolean} [hasParentalRating] Optional filter by items that have or do not have a parental rating
         * @param {boolean} [isHD] Optional filter by items that are HD or not.
         * @param {string} [locationTypes] Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
         * @param {string} [excludeLocationTypes] Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
         * @param {boolean} [isMissing] Optional filter by items that are missing episodes or not.
         * @param {boolean} [isUnaired] Optional filter by items that are unaired episodes or not.
         * @param {number} [minCommunityRating] Optional filter by minimum community rating.
         * @param {number} [minCriticRating] Optional filter by minimum critic rating.
         * @param {number} [airedDuringSeason] Gets all episodes that aired during a season, including specials.
         * @param {string} [minPremiereDate] Optional. The minimum premiere date. Format &#x3D; ISO
         * @param {string} [minDateLastSaved] Optional. The minimum premiere date. Format &#x3D; ISO
         * @param {string} [minDateLastSavedForUser] Optional. The minimum premiere date. Format &#x3D; ISO
         * @param {string} [maxPremiereDate] Optional. The maximum premiere date. Format &#x3D; ISO
         * @param {boolean} [hasOverview] Optional filter by items that have an overview or not.
         * @param {boolean} [hasImdbId] Optional filter by items that have an imdb id or not.
         * @param {boolean} [hasTmdbId] Optional filter by items that have a tmdb id or not.
         * @param {boolean} [hasTvdbId] Optional filter by items that have a tvdb id or not.
         * @param {string} [excludeItemIds] Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return
         * @param {boolean} [recursive] When searching within folders, this determines whether or not the search will be recursive. true/false
         * @param {string} [sortOrder] Sort Order - Ascending,Descending
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root
         * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
         * @param {string} [excludeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {string} [anyProviderIdEquals] Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs.
         * @param {string} [filters] Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
         * @param {boolean} [isFavorite] Optional filter by items that are marked as favorite, or not.
         * @param {boolean} [isMovie] Optional filter for movies.
         * @param {boolean} [isSeries] Optional filter for movies.
         * @param {boolean} [isNews] Optional filter for news.
         * @param {boolean} [isKids] Optional filter for kids.
         * @param {boolean} [isSports] Optional filter for sports.
         * @param {string} [mediaTypes] Optional filter by MediaType. Allows multiple, comma delimited.
         * @param {string} [imageTypes] Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
         * @param {string} [sortBy] Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
         * @param {boolean} [isPlayed] Optional filter by items that are played, or not.
         * @param {string} [genres] Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
         * @param {string} [officialRatings] Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
         * @param {string} [tags] Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
         * @param {string} [years] Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
         * @param {boolean} [enableImages] Optional, include image information in output
         * @param {boolean} [enableUserData] Optional, include user data
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
         * @param {string} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [person] Optional. If specified, results will be filtered to include only those containing the specified person.
         * @param {string} [personIds] Optional. If specified, results will be filtered to include only those containing the specified person.
         * @param {string} [personTypes] Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
         * @param {string} [studios] Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
         * @param {string} [studioIds] Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
         * @param {string} [artists] Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
         * @param {string} [artistIds] Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
         * @param {string} [albums] Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
         * @param {string} [ids] Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited.
         * @param {string} [videoTypes] Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
         * @param {string} [containers] Optional filter by Container. Allows multiple, comma delimeted.
         * @param {string} [audioCodecs] Optional filter by AudioCodec. Allows multiple, comma delimeted.
         * @param {string} [videoCodecs] Optional filter by VideoCodec. Allows multiple, comma delimeted.
         * @param {string} [subtitleCodecs] Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
         * @param {string} [path] Optional filter by Path.
         * @param {string} [userId] User Id
         * @param {string} [minOfficialRating] Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
         * @param {boolean} [isLocked] Optional filter by items that are locked.
         * @param {boolean} [isPlaceHolder] Optional filter by items that are placeholders
         * @param {boolean} [hasOfficialRating] Optional filter by items that have official ratings
         * @param {boolean} [groupItemsIntoCollections] Whether or not to hide items behind their boxsets.
         * @param {boolean} [is3D] Optional filter by items that are 3D, or not.
         * @param {string} [seriesStatus] Optional filter by Series Status. Allows multiple, comma delimeted.
         * @param {string} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
         * @param {string} [nameStartsWith] Optional filter by items whose name is sorted equally than a given input string.
         * @param {string} [nameLessThan] Optional filter by items whose name is equally or lesser than a given input string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrailers(artistType?: string, maxOfficialRating?: string, hasThemeSong?: boolean, hasThemeVideo?: boolean, hasSubtitles?: boolean, hasSpecialFeature?: boolean, hasTrailer?: boolean, adjacentTo?: string, minIndexNumber?: number, minPlayers?: number, maxPlayers?: number, parentIndexNumber?: number, hasParentalRating?: boolean, isHD?: boolean, locationTypes?: string, excludeLocationTypes?: string, isMissing?: boolean, isUnaired?: boolean, minCommunityRating?: number, minCriticRating?: number, airedDuringSeason?: number, minPremiereDate?: string, minDateLastSaved?: string, minDateLastSavedForUser?: string, maxPremiereDate?: string, hasOverview?: boolean, hasImdbId?: boolean, hasTmdbId?: boolean, hasTvdbId?: boolean, excludeItemIds?: string, startIndex?: number, limit?: number, recursive?: boolean, sortOrder?: string, parentId?: string, fields?: string, excludeItemTypes?: string, includeItemTypes?: string, anyProviderIdEquals?: string, filters?: string, isFavorite?: boolean, isMovie?: boolean, isSeries?: boolean, isNews?: boolean, isKids?: boolean, isSports?: boolean, mediaTypes?: string, imageTypes?: string, sortBy?: string, isPlayed?: boolean, genres?: string, officialRatings?: string, tags?: string, years?: string, enableImages?: boolean, enableUserData?: boolean, imageTypeLimit?: number, enableImageTypes?: string, person?: string, personIds?: string, personTypes?: string, studios?: string, studioIds?: string, artists?: string, artistIds?: string, albums?: string, ids?: string, videoTypes?: string, containers?: string, audioCodecs?: string, videoCodecs?: string, subtitleCodecs?: string, path?: string, userId?: string, minOfficialRating?: string, isLocked?: boolean, isPlaceHolder?: boolean, hasOfficialRating?: boolean, groupItemsIntoCollections?: boolean, is3D?: boolean, seriesStatus?: string, nameStartsWithOrGreater?: string, nameStartsWith?: string, nameLessThan?: string, options?: any): AxiosPromise<QueryResultBaseItemDto> {
            return TrailersServiceApiFp(configuration).getTrailers(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isNews, isKids, isSports, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, nameStartsWith, nameLessThan, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TrailersServiceApi - object-oriented interface
 * @export
 * @class TrailersServiceApi
 * @extends {BaseAPI}
 */
export class TrailersServiceApi extends BaseAPI {
    /**
     * Requires authentication as user
     * @summary Finds movies and trailers similar to a given trailer.
     * @param {string} [artistType] Artist or AlbumArtist
     * @param {string} [maxOfficialRating] Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
     * @param {boolean} [hasThemeSong] Optional filter by items with theme songs.
     * @param {boolean} [hasThemeVideo] Optional filter by items with theme videos.
     * @param {boolean} [hasSubtitles] Optional filter by items with subtitles.
     * @param {boolean} [hasSpecialFeature] Optional filter by items with special features.
     * @param {boolean} [hasTrailer] Optional filter by items with trailers.
     * @param {string} [adjacentTo] Optional. Return items that are siblings of a supplied item.
     * @param {number} [minIndexNumber] Optional filter by minimum index number.
     * @param {number} [minPlayers] Optional filter by minimum number of game players.
     * @param {number} [maxPlayers] Optional filter by maximum number of game players.
     * @param {number} [parentIndexNumber] Optional filter by parent index number.
     * @param {boolean} [hasParentalRating] Optional filter by items that have or do not have a parental rating
     * @param {boolean} [isHD] Optional filter by items that are HD or not.
     * @param {string} [locationTypes] Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
     * @param {string} [excludeLocationTypes] Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
     * @param {boolean} [isMissing] Optional filter by items that are missing episodes or not.
     * @param {boolean} [isUnaired] Optional filter by items that are unaired episodes or not.
     * @param {number} [minCommunityRating] Optional filter by minimum community rating.
     * @param {number} [minCriticRating] Optional filter by minimum critic rating.
     * @param {number} [airedDuringSeason] Gets all episodes that aired during a season, including specials.
     * @param {string} [minPremiereDate] Optional. The minimum premiere date. Format &#x3D; ISO
     * @param {string} [minDateLastSaved] Optional. The minimum premiere date. Format &#x3D; ISO
     * @param {string} [minDateLastSavedForUser] Optional. The minimum premiere date. Format &#x3D; ISO
     * @param {string} [maxPremiereDate] Optional. The maximum premiere date. Format &#x3D; ISO
     * @param {boolean} [hasOverview] Optional filter by items that have an overview or not.
     * @param {boolean} [hasImdbId] Optional filter by items that have an imdb id or not.
     * @param {boolean} [hasTmdbId] Optional filter by items that have a tmdb id or not.
     * @param {boolean} [hasTvdbId] Optional filter by items that have a tvdb id or not.
     * @param {string} [excludeItemIds] Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
     * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
     * @param {number} [limit] Optional. The maximum number of records to return
     * @param {boolean} [recursive] When searching within folders, this determines whether or not the search will be recursive. true/false
     * @param {string} [sortOrder] Sort Order - Ascending,Descending
     * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root
     * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
     * @param {string} [excludeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
     * @param {string} [includeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
     * @param {string} [anyProviderIdEquals] Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs.
     * @param {string} [filters] Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
     * @param {boolean} [isFavorite] Optional filter by items that are marked as favorite, or not.
     * @param {boolean} [isMovie] Optional filter for movies.
     * @param {boolean} [isSeries] Optional filter for movies.
     * @param {boolean} [isNews] Optional filter for news.
     * @param {boolean} [isKids] Optional filter for kids.
     * @param {boolean} [isSports] Optional filter for sports.
     * @param {string} [mediaTypes] Optional filter by MediaType. Allows multiple, comma delimited.
     * @param {string} [imageTypes] Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
     * @param {string} [sortBy] Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
     * @param {boolean} [isPlayed] Optional filter by items that are played, or not.
     * @param {string} [genres] Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
     * @param {string} [officialRatings] Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
     * @param {string} [tags] Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
     * @param {string} [years] Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
     * @param {boolean} [enableImages] Optional, include image information in output
     * @param {boolean} [enableUserData] Optional, include user data
     * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type
     * @param {string} [enableImageTypes] Optional. The image types to include in the output.
     * @param {string} [person] Optional. If specified, results will be filtered to include only those containing the specified person.
     * @param {string} [personIds] Optional. If specified, results will be filtered to include only those containing the specified person.
     * @param {string} [personTypes] Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
     * @param {string} [studios] Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
     * @param {string} [studioIds] Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
     * @param {string} [artists] Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
     * @param {string} [artistIds] Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
     * @param {string} [albums] Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
     * @param {string} [ids] Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited.
     * @param {string} [videoTypes] Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
     * @param {string} [containers] Optional filter by Container. Allows multiple, comma delimeted.
     * @param {string} [audioCodecs] Optional filter by AudioCodec. Allows multiple, comma delimeted.
     * @param {string} [videoCodecs] Optional filter by VideoCodec. Allows multiple, comma delimeted.
     * @param {string} [subtitleCodecs] Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
     * @param {string} [path] Optional filter by Path.
     * @param {string} [userId] User Id
     * @param {string} [minOfficialRating] Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
     * @param {boolean} [isLocked] Optional filter by items that are locked.
     * @param {boolean} [isPlaceHolder] Optional filter by items that are placeholders
     * @param {boolean} [hasOfficialRating] Optional filter by items that have official ratings
     * @param {boolean} [groupItemsIntoCollections] Whether or not to hide items behind their boxsets.
     * @param {boolean} [is3D] Optional filter by items that are 3D, or not.
     * @param {string} [seriesStatus] Optional filter by Series Status. Allows multiple, comma delimeted.
     * @param {string} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
     * @param {string} [nameStartsWith] Optional filter by items whose name is sorted equally than a given input string.
     * @param {string} [nameLessThan] Optional filter by items whose name is equally or lesser than a given input string.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrailersServiceApi
     */
    public getTrailers(artistType?: string, maxOfficialRating?: string, hasThemeSong?: boolean, hasThemeVideo?: boolean, hasSubtitles?: boolean, hasSpecialFeature?: boolean, hasTrailer?: boolean, adjacentTo?: string, minIndexNumber?: number, minPlayers?: number, maxPlayers?: number, parentIndexNumber?: number, hasParentalRating?: boolean, isHD?: boolean, locationTypes?: string, excludeLocationTypes?: string, isMissing?: boolean, isUnaired?: boolean, minCommunityRating?: number, minCriticRating?: number, airedDuringSeason?: number, minPremiereDate?: string, minDateLastSaved?: string, minDateLastSavedForUser?: string, maxPremiereDate?: string, hasOverview?: boolean, hasImdbId?: boolean, hasTmdbId?: boolean, hasTvdbId?: boolean, excludeItemIds?: string, startIndex?: number, limit?: number, recursive?: boolean, sortOrder?: string, parentId?: string, fields?: string, excludeItemTypes?: string, includeItemTypes?: string, anyProviderIdEquals?: string, filters?: string, isFavorite?: boolean, isMovie?: boolean, isSeries?: boolean, isNews?: boolean, isKids?: boolean, isSports?: boolean, mediaTypes?: string, imageTypes?: string, sortBy?: string, isPlayed?: boolean, genres?: string, officialRatings?: string, tags?: string, years?: string, enableImages?: boolean, enableUserData?: boolean, imageTypeLimit?: number, enableImageTypes?: string, person?: string, personIds?: string, personTypes?: string, studios?: string, studioIds?: string, artists?: string, artistIds?: string, albums?: string, ids?: string, videoTypes?: string, containers?: string, audioCodecs?: string, videoCodecs?: string, subtitleCodecs?: string, path?: string, userId?: string, minOfficialRating?: string, isLocked?: boolean, isPlaceHolder?: boolean, hasOfficialRating?: boolean, groupItemsIntoCollections?: boolean, is3D?: boolean, seriesStatus?: string, nameStartsWithOrGreater?: string, nameStartsWith?: string, nameLessThan?: string, options?: any) {
        return TrailersServiceApiFp(this.configuration).getTrailers(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isNews, isKids, isSports, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, nameStartsWith, nameLessThan, options).then((request) => request(this.axios, this.basePath));
    }
}
